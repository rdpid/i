"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@fal-ai";
exports.ids = ["vendor-chunks/@fal-ai"];
exports.modules = {

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js":
/*!**************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getRestApiUrl = exports.getConfig = exports.config = exports.credentialsFromEnv = void 0;\nconst middleware_1 = __webpack_require__(/*! ./middleware */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\");\n/**\n * Checks if the required FAL environment variables are set.\n *\n * @returns `true` if the required environment variables are set,\n * `false` otherwise.\n */ function hasEnvVariables() {\n    return typeof process !== \"undefined\" && process.env && (typeof process.env.FAL_KEY !== \"undefined\" || typeof process.env.FAL_KEY_ID !== \"undefined\" && typeof process.env.FAL_KEY_SECRET !== \"undefined\");\n}\nconst credentialsFromEnv = ()=>{\n    if (!hasEnvVariables()) {\n        return undefined;\n    }\n    if (typeof process.env.FAL_KEY !== \"undefined\") {\n        return process.env.FAL_KEY;\n    }\n    return `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}`;\n};\nexports.credentialsFromEnv = credentialsFromEnv;\nconst DEFAULT_CONFIG = {\n    credentials: exports.credentialsFromEnv,\n    requestMiddleware: (request)=>Promise.resolve(request),\n    responseHandler: response_1.defaultResponseHandler\n};\nlet configuration;\n/**\n * Configures the fal serverless client.\n *\n * @param config the new configuration.\n */ function config(config) {\n    configuration = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);\n    if (config.proxyUrl) {\n        configuration = Object.assign(Object.assign({}, configuration), {\n            requestMiddleware: (0, middleware_1.withMiddleware)(configuration.requestMiddleware, (0, middleware_1.withProxy)({\n                targetUrl: config.proxyUrl\n            }))\n        });\n    }\n}\nexports.config = config;\n/**\n * Get the current fal serverless client configuration.\n *\n * @returns the current client configuration.\n */ function getConfig() {\n    if (!configuration) {\n        console.info(\"Using default configuration for the fal client\");\n        return Object.assign({}, DEFAULT_CONFIG);\n    }\n    return configuration;\n}\nexports.getConfig = getConfig;\n/**\n * @returns the URL of the fal serverless rest api endpoint.\n */ function getRestApiUrl() {\n    return \"https://rest.alpha.fal.ai\";\n}\nexports.getRestApiUrl = getRestApiUrl; //# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvY29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxxQkFBcUIsR0FBR0EsaUJBQWlCLEdBQUdBLGNBQWMsR0FBR0EsMEJBQTBCLEdBQUcsS0FBSztBQUMvRixNQUFNTSxlQUFlQyxtQkFBT0EsQ0FBQyxzRkFBYztBQUMzQyxNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxrRkFBWTtBQUN2Qzs7Ozs7Q0FLQyxHQUNELFNBQVNFO0lBQ0wsT0FBUSxPQUFPQyxZQUFZLGVBQ3ZCQSxRQUFRQyxHQUFHLElBQ1YsUUFBT0QsUUFBUUMsR0FBRyxDQUFDQyxPQUFPLEtBQUssZUFDM0IsT0FBT0YsUUFBUUMsR0FBRyxDQUFDRSxVQUFVLEtBQUssZUFDL0IsT0FBT0gsUUFBUUMsR0FBRyxDQUFDRyxjQUFjLEtBQUssV0FBVztBQUNqRTtBQUNBLE1BQU1ULHFCQUFxQjtJQUN2QixJQUFJLENBQUNJLG1CQUFtQjtRQUNwQixPQUFPTTtJQUNYO0lBQ0EsSUFBSSxPQUFPTCxRQUFRQyxHQUFHLENBQUNDLE9BQU8sS0FBSyxhQUFhO1FBQzVDLE9BQU9GLFFBQVFDLEdBQUcsQ0FBQ0MsT0FBTztJQUM5QjtJQUNBLE9BQU8sQ0FBQyxFQUFFRixRQUFRQyxHQUFHLENBQUNFLFVBQVUsQ0FBQyxDQUFDLEVBQUVILFFBQVFDLEdBQUcsQ0FBQ0csY0FBYyxDQUFDLENBQUM7QUFDcEU7QUFDQWQsMEJBQTBCLEdBQUdLO0FBQzdCLE1BQU1XLGlCQUFpQjtJQUNuQkMsYUFBYWpCLFFBQVFLLGtCQUFrQjtJQUN2Q2EsbUJBQW1CLENBQUNDLFVBQVlDLFFBQVFDLE9BQU8sQ0FBQ0Y7SUFDaERHLGlCQUFpQmQsV0FBV2Usc0JBQXNCO0FBQ3REO0FBQ0EsSUFBSUM7QUFDSjs7OztDQUlDLEdBQ0QsU0FBU3BCLE9BQU9BLE1BQU07SUFDbEJvQixnQkFBZ0IxQixPQUFPMkIsTUFBTSxDQUFDM0IsT0FBTzJCLE1BQU0sQ0FBQyxDQUFDLEdBQUdULGlCQUFpQlo7SUFDakUsSUFBSUEsT0FBT3NCLFFBQVEsRUFBRTtRQUNqQkYsZ0JBQWdCMUIsT0FBTzJCLE1BQU0sQ0FBQzNCLE9BQU8yQixNQUFNLENBQUMsQ0FBQyxHQUFHRCxnQkFBZ0I7WUFBRU4sbUJBQW1CLENBQUMsR0FBR1osYUFBYXFCLGNBQWMsRUFBRUgsY0FBY04saUJBQWlCLEVBQUUsQ0FBQyxHQUFHWixhQUFhc0IsU0FBUyxFQUFFO2dCQUFFQyxXQUFXekIsT0FBT3NCLFFBQVE7WUFBQztRQUFJO0lBQ3hOO0FBQ0o7QUFDQTFCLGNBQWMsR0FBR0k7QUFDakI7Ozs7Q0FJQyxHQUNELFNBQVNEO0lBQ0wsSUFBSSxDQUFDcUIsZUFBZTtRQUNoQk0sUUFBUUMsSUFBSSxDQUFDO1FBQ2IsT0FBT2pDLE9BQU8yQixNQUFNLENBQUMsQ0FBQyxHQUFHVDtJQUM3QjtJQUNBLE9BQU9RO0FBQ1g7QUFDQXhCLGlCQUFpQixHQUFHRztBQUNwQjs7Q0FFQyxHQUNELFNBQVNEO0lBQ0wsT0FBTztBQUNYO0FBQ0FGLHFCQUFxQixHQUFHRSxlQUN4QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZmFsLWFpL3NkeGwtbGlnaHRuaW5nLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1jbGllbnQvc3JjL2NvbmZpZy5qcz9hMzUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSZXN0QXBpVXJsID0gZXhwb3J0cy5nZXRDb25maWcgPSBleHBvcnRzLmNvbmZpZyA9IGV4cG9ydHMuY3JlZGVudGlhbHNGcm9tRW52ID0gdm9pZCAwO1xuY29uc3QgbWlkZGxld2FyZV8xID0gcmVxdWlyZShcIi4vbWlkZGxld2FyZVwiKTtcbmNvbnN0IHJlc3BvbnNlXzEgPSByZXF1aXJlKFwiLi9yZXNwb25zZVwiKTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSByZXF1aXJlZCBGQUwgZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBzZXQuXG4gKlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgYXJlIHNldCxcbiAqIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBoYXNFbnZWYXJpYWJsZXMoKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYgJiZcbiAgICAgICAgKHR5cGVvZiBwcm9jZXNzLmVudi5GQUxfS0VZICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgICAgICAgKHR5cGVvZiBwcm9jZXNzLmVudi5GQUxfS0VZX0lEICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBwcm9jZXNzLmVudi5GQUxfS0VZX1NFQ1JFVCAhPT0gJ3VuZGVmaW5lZCcpKSk7XG59XG5jb25zdCBjcmVkZW50aWFsc0Zyb21FbnYgPSAoKSA9PiB7XG4gICAgaWYgKCFoYXNFbnZWYXJpYWJsZXMoKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MuZW52LkZBTF9LRVkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudi5GQUxfS0VZO1xuICAgIH1cbiAgICByZXR1cm4gYCR7cHJvY2Vzcy5lbnYuRkFMX0tFWV9JRH06JHtwcm9jZXNzLmVudi5GQUxfS0VZX1NFQ1JFVH1gO1xufTtcbmV4cG9ydHMuY3JlZGVudGlhbHNGcm9tRW52ID0gY3JlZGVudGlhbHNGcm9tRW52O1xuY29uc3QgREVGQVVMVF9DT05GSUcgPSB7XG4gICAgY3JlZGVudGlhbHM6IGV4cG9ydHMuY3JlZGVudGlhbHNGcm9tRW52LFxuICAgIHJlcXVlc3RNaWRkbGV3YXJlOiAocmVxdWVzdCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3QpLFxuICAgIHJlc3BvbnNlSGFuZGxlcjogcmVzcG9uc2VfMS5kZWZhdWx0UmVzcG9uc2VIYW5kbGVyLFxufTtcbmxldCBjb25maWd1cmF0aW9uO1xuLyoqXG4gKiBDb25maWd1cmVzIHRoZSBmYWwgc2VydmVybGVzcyBjbGllbnQuXG4gKlxuICogQHBhcmFtIGNvbmZpZyB0aGUgbmV3IGNvbmZpZ3VyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGNvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRyksIGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5wcm94eVVybCkge1xuICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb25maWd1cmF0aW9uKSwgeyByZXF1ZXN0TWlkZGxld2FyZTogKDAsIG1pZGRsZXdhcmVfMS53aXRoTWlkZGxld2FyZSkoY29uZmlndXJhdGlvbi5yZXF1ZXN0TWlkZGxld2FyZSwgKDAsIG1pZGRsZXdhcmVfMS53aXRoUHJveHkpKHsgdGFyZ2V0VXJsOiBjb25maWcucHJveHlVcmwgfSkpIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuY29uZmlnID0gY29uZmlnO1xuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgZmFsIHNlcnZlcmxlc3MgY2xpZW50IGNvbmZpZ3VyYXRpb24uXG4gKlxuICogQHJldHVybnMgdGhlIGN1cnJlbnQgY2xpZW50IGNvbmZpZ3VyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldENvbmZpZygpIHtcbiAgICBpZiAoIWNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgY29uc29sZS5pbmZvKCdVc2luZyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBmYWwgY2xpZW50Jyk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRyk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWd1cmF0aW9uO1xufVxuZXhwb3J0cy5nZXRDb25maWcgPSBnZXRDb25maWc7XG4vKipcbiAqIEByZXR1cm5zIHRoZSBVUkwgb2YgdGhlIGZhbCBzZXJ2ZXJsZXNzIHJlc3QgYXBpIGVuZHBvaW50LlxuICovXG5mdW5jdGlvbiBnZXRSZXN0QXBpVXJsKCkge1xuICAgIHJldHVybiAnaHR0cHM6Ly9yZXN0LmFscGhhLmZhbC5haSc7XG59XG5leHBvcnRzLmdldFJlc3RBcGlVcmwgPSBnZXRSZXN0QXBpVXJsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFJlc3RBcGlVcmwiLCJnZXRDb25maWciLCJjb25maWciLCJjcmVkZW50aWFsc0Zyb21FbnYiLCJtaWRkbGV3YXJlXzEiLCJyZXF1aXJlIiwicmVzcG9uc2VfMSIsImhhc0VudlZhcmlhYmxlcyIsInByb2Nlc3MiLCJlbnYiLCJGQUxfS0VZIiwiRkFMX0tFWV9JRCIsIkZBTF9LRVlfU0VDUkVUIiwidW5kZWZpbmVkIiwiREVGQVVMVF9DT05GSUciLCJjcmVkZW50aWFscyIsInJlcXVlc3RNaWRkbGV3YXJlIiwicmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVzcG9uc2VIYW5kbGVyIiwiZGVmYXVsdFJlc3BvbnNlSGFuZGxlciIsImNvbmZpZ3VyYXRpb24iLCJhc3NpZ24iLCJwcm94eVVybCIsIndpdGhNaWRkbGV3YXJlIiwid2l0aFByb3h5IiwidGFyZ2V0VXJsIiwiY29uc29sZSIsImluZm8iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/function.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/function.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.queue = exports.subscribe = exports.run = exports.send = exports.buildUrl = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\");\nconst storage_1 = __webpack_require__(/*! ./storage */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\");\n/**\n * Builds the final url to run the function based on its `id` or alias and\n * a the options from `RunOptions<Input>`.\n *\n * @private\n * @param id the function id or alias\n * @param options the run options\n * @returns the final url to run the function\n */ function buildUrl(id, options = {}) {\n    var _a, _b;\n    const method = ((_a = options.method) !== null && _a !== void 0 ? _a : \"post\").toLowerCase();\n    const path = ((_b = options.path) !== null && _b !== void 0 ? _b : \"\").replace(/^\\//, \"\").replace(/\\/{2,}/, \"/\");\n    const input = options.input;\n    const params = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    method === \"get\" && input ? new URLSearchParams(input) : undefined;\n    const queryParams = params ? `?${params.toString()}` : \"\";\n    const parts = id.split(\"/\");\n    // if a fal url is passed, just use it\n    if ((0, utils_1.isValidUrl)(id)) {\n        const url = id.endsWith(\"/\") ? id : `${id}/`;\n        return `${url}${path}${queryParams}`;\n    }\n    // TODO remove this after some time, fal.run should be preferred\n    if (parts.length === 2 && (0, utils_1.isUUIDv4)(parts[1])) {\n        const host = \"gateway.shark.fal.ai\";\n        return `https://${host}/trigger/${id}/${path}${queryParams}`;\n    }\n    const appId = (0, utils_1.ensureAppIdFormat)(id);\n    const subdomain = options.subdomain ? `${options.subdomain}.` : \"\";\n    const url = `https://${subdomain}fal.run/${appId}/${path}`;\n    return `${url.replace(/\\/$/, \"\")}${queryParams}`;\n}\nexports.buildUrl = buildUrl;\nfunction send(id, options = {}) {\n    var _a;\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const input = options.input && options.autoUpload !== false ? yield storage_1.storageImpl.transformInput(options.input) : options.input;\n        return (0, request_1.dispatchRequest)((_a = options.method) !== null && _a !== void 0 ? _a : \"post\", buildUrl(id, options), input);\n    });\n}\nexports.send = send;\n/**\n * Runs a fal serverless function identified by its `id`.\n *\n * @param id the registered function revision id or alias.\n * @returns the remote function output\n */ function run(id, options = {}) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        return send(id, options);\n    });\n}\nexports.run = run;\n/**\n * Subscribes to updates for a specific request in the queue.\n *\n * @param id - The ID or URL of the function web endpoint.\n * @param options - Options to configure how the request is run and how updates are received.\n * @returns A promise that resolves to the result of the request once it's completed.\n */ function subscribe(id, options = {}) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const { request_id: requestId } = yield exports.queue.submit(id, options);\n        if (options.onEnqueue) {\n            options.onEnqueue(requestId);\n        }\n        return new Promise((resolve, reject)=>{\n            var _a;\n            let timeoutId;\n            const pollInterval = (_a = options.pollInterval) !== null && _a !== void 0 ? _a : 1000;\n            const poll = ()=>tslib_1.__awaiter(this, void 0, void 0, function*() {\n                    var _b;\n                    try {\n                        const requestStatus = yield exports.queue.status(id, {\n                            requestId,\n                            logs: (_b = options.logs) !== null && _b !== void 0 ? _b : false\n                        });\n                        if (options.onQueueUpdate) {\n                            options.onQueueUpdate(requestStatus);\n                        }\n                        if (requestStatus.status === \"COMPLETED\") {\n                            clearTimeout(timeoutId);\n                            try {\n                                const result = yield exports.queue.result(id, {\n                                    requestId\n                                });\n                                resolve(result);\n                            } catch (error) {\n                                reject(error);\n                            }\n                            return;\n                        }\n                        timeoutId = setTimeout(poll, pollInterval);\n                    } catch (error) {\n                        clearTimeout(timeoutId);\n                        reject(error);\n                    }\n                });\n            poll().catch(reject);\n        });\n    });\n}\nexports.subscribe = subscribe;\n/**\n * The fal run queue module. It allows to submit a function to the queue and get its result\n * on a separate call. This is useful for long running functions that can be executed\n * asynchronously and not .\n */ exports.queue = {\n    submit (id, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const { webhookUrl, path = \"\" } = options, runOptions = tslib_1.__rest(options, [\n                \"webhookUrl\",\n                \"path\"\n            ]);\n            const query = webhookUrl ? \"?\" + new URLSearchParams({\n                fal_webhook: webhookUrl\n            }).toString() : \"\";\n            return send(id, Object.assign(Object.assign({}, runOptions), {\n                subdomain: \"queue\",\n                method: \"post\",\n                path: path + query\n            }));\n        });\n    },\n    status (id, { requestId, logs = false }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const [appOwner, appAlias] = (0, utils_1.ensureAppIdFormat)(id).split(\"/\");\n            return send(`${appOwner}/${appAlias}`, {\n                subdomain: \"queue\",\n                method: \"get\",\n                path: `/requests/${requestId}/status`,\n                input: {\n                    logs: logs ? \"1\" : \"0\"\n                }\n            });\n        });\n    },\n    result (id, { requestId }) {\n        return tslib_1.__awaiter(this, void 0, void 0, function*() {\n            const [appOwner, appAlias] = (0, utils_1.ensureAppIdFormat)(id).split(\"/\");\n            return send(`${appOwner}/${appAlias}`, {\n                subdomain: \"queue\",\n                method: \"get\",\n                path: `/requests/${requestId}`\n            });\n        });\n    },\n    subscribe\n}; //# sourceMappingURL=function.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvZnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBR0EsaUJBQWlCLEdBQUdBLFdBQVcsR0FBR0EsWUFBWSxHQUFHQSxnQkFBZ0IsR0FBRyxLQUFLO0FBQ3pGLE1BQU1PLFVBQVVDLG1CQUFPQSxDQUFDLHVEQUFPO0FBQy9CLE1BQU1DLFlBQVlELG1CQUFPQSxDQUFDLGdGQUFXO0FBQ3JDLE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDLGdGQUFXO0FBQ3JDLE1BQU1HLFVBQVVILG1CQUFPQSxDQUFDLDRFQUFTO0FBQ2pDOzs7Ozs7OztDQVFDLEdBQ0QsU0FBU0YsU0FBU00sRUFBRSxFQUFFQyxVQUFVLENBQUMsQ0FBQztJQUM5QixJQUFJQyxJQUFJQztJQUNSLE1BQU1DLFNBQVMsQ0FBQyxDQUFDRixLQUFLRCxRQUFRRyxNQUFNLE1BQU0sUUFBUUYsT0FBTyxLQUFLLElBQUlBLEtBQUssTUFBSyxFQUFHRyxXQUFXO0lBQzFGLE1BQU1DLE9BQU8sQ0FBQyxDQUFDSCxLQUFLRixRQUFRSyxJQUFJLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBQyxFQUFHSSxPQUFPLENBQUMsT0FBTyxJQUFJQSxPQUFPLENBQUMsVUFBVTtJQUM1RyxNQUFNQyxRQUFRUCxRQUFRTyxLQUFLO0lBQzNCLE1BQU1DLFNBQ04sOERBQThEO0lBQzlETCxXQUFXLFNBQVNJLFFBQVEsSUFBSUUsZ0JBQWdCRixTQUFTRztJQUN6RCxNQUFNQyxjQUFjSCxTQUFTLENBQUMsQ0FBQyxFQUFFQSxPQUFPSSxRQUFRLEdBQUcsQ0FBQyxHQUFHO0lBQ3ZELE1BQU1DLFFBQVFkLEdBQUdlLEtBQUssQ0FBQztJQUN2QixzQ0FBc0M7SUFDdEMsSUFBSSxDQUFDLEdBQUdoQixRQUFRaUIsVUFBVSxFQUFFaEIsS0FBSztRQUM3QixNQUFNaUIsTUFBTWpCLEdBQUdrQixRQUFRLENBQUMsT0FBT2xCLEtBQUssQ0FBQyxFQUFFQSxHQUFHLENBQUMsQ0FBQztRQUM1QyxPQUFPLENBQUMsRUFBRWlCLElBQUksRUFBRVgsS0FBSyxFQUFFTSxZQUFZLENBQUM7SUFDeEM7SUFDQSxnRUFBZ0U7SUFDaEUsSUFBSUUsTUFBTUssTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUFHcEIsUUFBUXFCLFFBQVEsRUFBRU4sS0FBSyxDQUFDLEVBQUUsR0FBRztRQUN2RCxNQUFNTyxPQUFPO1FBQ2IsT0FBTyxDQUFDLFFBQVEsRUFBRUEsS0FBSyxTQUFTLEVBQUVyQixHQUFHLENBQUMsRUFBRU0sS0FBSyxFQUFFTSxZQUFZLENBQUM7SUFDaEU7SUFDQSxNQUFNVSxRQUFRLENBQUMsR0FBR3ZCLFFBQVF3QixpQkFBaUIsRUFBRXZCO0lBQzdDLE1BQU13QixZQUFZdkIsUUFBUXVCLFNBQVMsR0FBRyxDQUFDLEVBQUV2QixRQUFRdUIsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHO0lBQ2hFLE1BQU1QLE1BQU0sQ0FBQyxRQUFRLEVBQUVPLFVBQVUsUUFBUSxFQUFFRixNQUFNLENBQUMsRUFBRWhCLEtBQUssQ0FBQztJQUMxRCxPQUFPLENBQUMsRUFBRVcsSUFBSVYsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFSyxZQUFZLENBQUM7QUFDcEQ7QUFDQXhCLGdCQUFnQixHQUFHTTtBQUNuQixTQUFTRCxLQUFLTyxFQUFFLEVBQUVDLFVBQVUsQ0FBQyxDQUFDO0lBQzFCLElBQUlDO0lBQ0osT0FBT1AsUUFBUThCLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUMzQyxNQUFNakIsUUFBUVAsUUFBUU8sS0FBSyxJQUFJUCxRQUFReUIsVUFBVSxLQUFLLFFBQ2hELE1BQU01QixVQUFVNkIsV0FBVyxDQUFDQyxjQUFjLENBQUMzQixRQUFRTyxLQUFLLElBQ3hEUCxRQUFRTyxLQUFLO1FBQ25CLE9BQU8sQ0FBQyxHQUFHWCxVQUFVZ0MsZUFBZSxFQUFFLENBQUMzQixLQUFLRCxRQUFRRyxNQUFNLE1BQU0sUUFBUUYsT0FBTyxLQUFLLElBQUlBLEtBQUssUUFBUVIsU0FBU00sSUFBSUMsVUFBVU87SUFDaEk7QUFDSjtBQUNBcEIsWUFBWSxHQUFHSztBQUNmOzs7OztDQUtDLEdBQ0QsU0FBU0QsSUFBSVEsRUFBRSxFQUFFQyxVQUFVLENBQUMsQ0FBQztJQUN6QixPQUFPTixRQUFROEIsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1FBQzNDLE9BQU9oQyxLQUFLTyxJQUFJQztJQUNwQjtBQUNKO0FBQ0FiLFdBQVcsR0FBR0k7QUFDZDs7Ozs7O0NBTUMsR0FDRCxTQUFTRCxVQUFVUyxFQUFFLEVBQUVDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLE9BQU9OLFFBQVE4QixTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDM0MsTUFBTSxFQUFFSyxZQUFZQyxTQUFTLEVBQUUsR0FBRyxNQUFNM0MsUUFBUUUsS0FBSyxDQUFDMEMsTUFBTSxDQUFDaEMsSUFBSUM7UUFDakUsSUFBSUEsUUFBUWdDLFNBQVMsRUFBRTtZQUNuQmhDLFFBQVFnQyxTQUFTLENBQUNGO1FBQ3RCO1FBQ0EsT0FBTyxJQUFJRyxRQUFRLENBQUNDLFNBQVNDO1lBQ3pCLElBQUlsQztZQUNKLElBQUltQztZQUNKLE1BQU1DLGVBQWUsQ0FBQ3BDLEtBQUtELFFBQVFxQyxZQUFZLE1BQU0sUUFBUXBDLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1lBQ2xGLE1BQU1xQyxPQUFPLElBQU01QyxRQUFROEIsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO29CQUN2RCxJQUFJdEI7b0JBQ0osSUFBSTt3QkFDQSxNQUFNcUMsZ0JBQWdCLE1BQU1wRCxRQUFRRSxLQUFLLENBQUNtRCxNQUFNLENBQUN6QyxJQUFJOzRCQUNqRCtCOzRCQUNBVyxNQUFNLENBQUN2QyxLQUFLRixRQUFReUMsSUFBSSxNQUFNLFFBQVF2QyxPQUFPLEtBQUssSUFBSUEsS0FBSzt3QkFDL0Q7d0JBQ0EsSUFBSUYsUUFBUTBDLGFBQWEsRUFBRTs0QkFDdkIxQyxRQUFRMEMsYUFBYSxDQUFDSDt3QkFDMUI7d0JBQ0EsSUFBSUEsY0FBY0MsTUFBTSxLQUFLLGFBQWE7NEJBQ3RDRyxhQUFhUDs0QkFDYixJQUFJO2dDQUNBLE1BQU1RLFNBQVMsTUFBTXpELFFBQVFFLEtBQUssQ0FBQ3VELE1BQU0sQ0FBQzdDLElBQUk7b0NBQUUrQjtnQ0FBVTtnQ0FDMURJLFFBQVFVOzRCQUNaLEVBQ0EsT0FBT0MsT0FBTztnQ0FDVlYsT0FBT1U7NEJBQ1g7NEJBQ0E7d0JBQ0o7d0JBQ0FULFlBQVlVLFdBQVdSLE1BQU1EO29CQUNqQyxFQUNBLE9BQU9RLE9BQU87d0JBQ1ZGLGFBQWFQO3dCQUNiRCxPQUFPVTtvQkFDWDtnQkFDSjtZQUNBUCxPQUFPUyxLQUFLLENBQUNaO1FBQ2pCO0lBQ0o7QUFDSjtBQUNBaEQsaUJBQWlCLEdBQUdHO0FBQ3BCOzs7O0NBSUMsR0FDREgsYUFBYSxHQUFHO0lBQ1o0QyxRQUFPaEMsRUFBRSxFQUFFQyxPQUFPO1FBQ2QsT0FBT04sUUFBUThCLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztZQUMzQyxNQUFNLEVBQUV3QixVQUFVLEVBQUUzQyxPQUFPLEVBQUUsRUFBRSxHQUFHTCxTQUFTaUQsYUFBYXZELFFBQVF3RCxNQUFNLENBQUNsRCxTQUFTO2dCQUFDO2dCQUFjO2FBQU87WUFDdEcsTUFBTW1ELFFBQVFILGFBQ1IsTUFBTSxJQUFJdkMsZ0JBQWdCO2dCQUFFMkMsYUFBYUo7WUFBVyxHQUFHcEMsUUFBUSxLQUMvRDtZQUNOLE9BQU9wQixLQUFLTyxJQUFJZCxPQUFPb0UsTUFBTSxDQUFDcEUsT0FBT29FLE1BQU0sQ0FBQyxDQUFDLEdBQUdKLGFBQWE7Z0JBQUUxQixXQUFXO2dCQUFTcEIsUUFBUTtnQkFBUUUsTUFBTUEsT0FBTzhDO1lBQU07UUFDMUg7SUFDSjtJQUNBWCxRQUFPekMsRUFBRSxFQUFFLEVBQUUrQixTQUFTLEVBQUVXLE9BQU8sS0FBSyxFQUFFO1FBQ2xDLE9BQU8vQyxRQUFROEIsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQzNDLE1BQU0sQ0FBQzhCLFVBQVVDLFNBQVMsR0FBRyxDQUFDLEdBQUd6RCxRQUFRd0IsaUJBQWlCLEVBQUV2QixJQUFJZSxLQUFLLENBQUM7WUFDdEUsT0FBT3RCLEtBQUssQ0FBQyxFQUFFOEQsU0FBUyxDQUFDLEVBQUVDLFNBQVMsQ0FBQyxFQUFFO2dCQUNuQ2hDLFdBQVc7Z0JBQ1hwQixRQUFRO2dCQUNSRSxNQUFNLENBQUMsVUFBVSxFQUFFeUIsVUFBVSxPQUFPLENBQUM7Z0JBQ3JDdkIsT0FBTztvQkFDSGtDLE1BQU1BLE9BQU8sTUFBTTtnQkFDdkI7WUFDSjtRQUNKO0lBQ0o7SUFDQUcsUUFBTzdDLEVBQUUsRUFBRSxFQUFFK0IsU0FBUyxFQUFFO1FBQ3BCLE9BQU9wQyxRQUFROEIsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1lBQzNDLE1BQU0sQ0FBQzhCLFVBQVVDLFNBQVMsR0FBRyxDQUFDLEdBQUd6RCxRQUFRd0IsaUJBQWlCLEVBQUV2QixJQUFJZSxLQUFLLENBQUM7WUFDdEUsT0FBT3RCLEtBQUssQ0FBQyxFQUFFOEQsU0FBUyxDQUFDLEVBQUVDLFNBQVMsQ0FBQyxFQUFFO2dCQUNuQ2hDLFdBQVc7Z0JBQ1hwQixRQUFRO2dCQUNSRSxNQUFNLENBQUMsVUFBVSxFQUFFeUIsVUFBVSxDQUFDO1lBQ2xDO1FBQ0o7SUFDSjtJQUNBeEM7QUFDSixHQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BmYWwtYWkvc2R4bC1saWdodG5pbmcvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvZnVuY3Rpb24uanM/MzU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucXVldWUgPSBleHBvcnRzLnN1YnNjcmliZSA9IGV4cG9ydHMucnVuID0gZXhwb3J0cy5zZW5kID0gZXhwb3J0cy5idWlsZFVybCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCByZXF1ZXN0XzEgPSByZXF1aXJlKFwiLi9yZXF1ZXN0XCIpO1xuY29uc3Qgc3RvcmFnZV8xID0gcmVxdWlyZShcIi4vc3RvcmFnZVwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbi8qKlxuICogQnVpbGRzIHRoZSBmaW5hbCB1cmwgdG8gcnVuIHRoZSBmdW5jdGlvbiBiYXNlZCBvbiBpdHMgYGlkYCBvciBhbGlhcyBhbmRcbiAqIGEgdGhlIG9wdGlvbnMgZnJvbSBgUnVuT3B0aW9uczxJbnB1dD5gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gaWQgdGhlIGZ1bmN0aW9uIGlkIG9yIGFsaWFzXG4gKiBAcGFyYW0gb3B0aW9ucyB0aGUgcnVuIG9wdGlvbnNcbiAqIEByZXR1cm5zIHRoZSBmaW5hbCB1cmwgdG8gcnVuIHRoZSBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBidWlsZFVybChpZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBtZXRob2QgPSAoKF9hID0gb3B0aW9ucy5tZXRob2QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdwb3N0JykudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBwYXRoID0gKChfYiA9IG9wdGlvbnMucGF0aCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJycpLnJlcGxhY2UoL15cXC8vLCAnJykucmVwbGFjZSgvXFwvezIsfS8sICcvJyk7XG4gICAgY29uc3QgaW5wdXQgPSBvcHRpb25zLmlucHV0O1xuICAgIGNvbnN0IHBhcmFtcyA9IFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbWV0aG9kID09PSAnZ2V0JyAmJiBpbnB1dCA/IG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5wdXQpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gcGFyYW1zID8gYD8ke3BhcmFtcy50b1N0cmluZygpfWAgOiAnJztcbiAgICBjb25zdCBwYXJ0cyA9IGlkLnNwbGl0KCcvJyk7XG4gICAgLy8gaWYgYSBmYWwgdXJsIGlzIHBhc3NlZCwganVzdCB1c2UgaXRcbiAgICBpZiAoKDAsIHV0aWxzXzEuaXNWYWxpZFVybCkoaWQpKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IGlkLmVuZHNXaXRoKCcvJykgPyBpZCA6IGAke2lkfS9gO1xuICAgICAgICByZXR1cm4gYCR7dXJsfSR7cGF0aH0ke3F1ZXJ5UGFyYW1zfWA7XG4gICAgfVxuICAgIC8vIFRPRE8gcmVtb3ZlIHRoaXMgYWZ0ZXIgc29tZSB0aW1lLCBmYWwucnVuIHNob3VsZCBiZSBwcmVmZXJyZWRcbiAgICBpZiAocGFydHMubGVuZ3RoID09PSAyICYmICgwLCB1dGlsc18xLmlzVVVJRHY0KShwYXJ0c1sxXSkpIHtcbiAgICAgICAgY29uc3QgaG9zdCA9ICdnYXRld2F5LnNoYXJrLmZhbC5haSc7XG4gICAgICAgIHJldHVybiBgaHR0cHM6Ly8ke2hvc3R9L3RyaWdnZXIvJHtpZH0vJHtwYXRofSR7cXVlcnlQYXJhbXN9YDtcbiAgICB9XG4gICAgY29uc3QgYXBwSWQgPSAoMCwgdXRpbHNfMS5lbnN1cmVBcHBJZEZvcm1hdCkoaWQpO1xuICAgIGNvbnN0IHN1YmRvbWFpbiA9IG9wdGlvbnMuc3ViZG9tYWluID8gYCR7b3B0aW9ucy5zdWJkb21haW59LmAgOiAnJztcbiAgICBjb25zdCB1cmwgPSBgaHR0cHM6Ly8ke3N1YmRvbWFpbn1mYWwucnVuLyR7YXBwSWR9LyR7cGF0aH1gO1xuICAgIHJldHVybiBgJHt1cmwucmVwbGFjZSgvXFwvJC8sICcnKX0ke3F1ZXJ5UGFyYW1zfWA7XG59XG5leHBvcnRzLmJ1aWxkVXJsID0gYnVpbGRVcmw7XG5mdW5jdGlvbiBzZW5kKGlkLCBvcHRpb25zID0ge30pIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBpbnB1dCA9IG9wdGlvbnMuaW5wdXQgJiYgb3B0aW9ucy5hdXRvVXBsb2FkICE9PSBmYWxzZVxuICAgICAgICAgICAgPyB5aWVsZCBzdG9yYWdlXzEuc3RvcmFnZUltcGwudHJhbnNmb3JtSW5wdXQob3B0aW9ucy5pbnB1dClcbiAgICAgICAgICAgIDogb3B0aW9ucy5pbnB1dDtcbiAgICAgICAgcmV0dXJuICgwLCByZXF1ZXN0XzEuZGlzcGF0Y2hSZXF1ZXN0KSgoX2EgPSBvcHRpb25zLm1ldGhvZCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ3Bvc3QnLCBidWlsZFVybChpZCwgb3B0aW9ucyksIGlucHV0KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2VuZCA9IHNlbmQ7XG4vKipcbiAqIFJ1bnMgYSBmYWwgc2VydmVybGVzcyBmdW5jdGlvbiBpZGVudGlmaWVkIGJ5IGl0cyBgaWRgLlxuICpcbiAqIEBwYXJhbSBpZCB0aGUgcmVnaXN0ZXJlZCBmdW5jdGlvbiByZXZpc2lvbiBpZCBvciBhbGlhcy5cbiAqIEByZXR1cm5zIHRoZSByZW1vdGUgZnVuY3Rpb24gb3V0cHV0XG4gKi9cbmZ1bmN0aW9uIHJ1bihpZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZXR1cm4gc2VuZChpZCwgb3B0aW9ucyk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJ1biA9IHJ1bjtcbi8qKlxuICogU3Vic2NyaWJlcyB0byB1cGRhdGVzIGZvciBhIHNwZWNpZmljIHJlcXVlc3QgaW4gdGhlIHF1ZXVlLlxuICpcbiAqIEBwYXJhbSBpZCAtIFRoZSBJRCBvciBVUkwgb2YgdGhlIGZ1bmN0aW9uIHdlYiBlbmRwb2ludC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyB0byBjb25maWd1cmUgaG93IHRoZSByZXF1ZXN0IGlzIHJ1biBhbmQgaG93IHVwZGF0ZXMgYXJlIHJlY2VpdmVkLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHJlc3VsdCBvZiB0aGUgcmVxdWVzdCBvbmNlIGl0J3MgY29tcGxldGVkLlxuICovXG5mdW5jdGlvbiBzdWJzY3JpYmUoaWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgeyByZXF1ZXN0X2lkOiByZXF1ZXN0SWQgfSA9IHlpZWxkIGV4cG9ydHMucXVldWUuc3VibWl0KGlkLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG9wdGlvbnMub25FbnF1ZXVlKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9uRW5xdWV1ZShyZXF1ZXN0SWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBsZXQgdGltZW91dElkO1xuICAgICAgICAgICAgY29uc3QgcG9sbEludGVydmFsID0gKF9hID0gb3B0aW9ucy5wb2xsSW50ZXJ2YWwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDEwMDA7XG4gICAgICAgICAgICBjb25zdCBwb2xsID0gKCkgPT4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RTdGF0dXMgPSB5aWVsZCBleHBvcnRzLnF1ZXVlLnN0YXR1cyhpZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nczogKF9iID0gb3B0aW9ucy5sb2dzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm9uUXVldWVVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25RdWV1ZVVwZGF0ZShyZXF1ZXN0U3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFN0YXR1cy5zdGF0dXMgPT09ICdDT01QTEVURUQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgZXhwb3J0cy5xdWV1ZS5yZXN1bHQoaWQsIHsgcmVxdWVzdElkIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChwb2xsLCBwb2xsSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb2xsKCkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnN1YnNjcmliZSA9IHN1YnNjcmliZTtcbi8qKlxuICogVGhlIGZhbCBydW4gcXVldWUgbW9kdWxlLiBJdCBhbGxvd3MgdG8gc3VibWl0IGEgZnVuY3Rpb24gdG8gdGhlIHF1ZXVlIGFuZCBnZXQgaXRzIHJlc3VsdFxuICogb24gYSBzZXBhcmF0ZSBjYWxsLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbG9uZyBydW5uaW5nIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBleGVjdXRlZFxuICogYXN5bmNocm9ub3VzbHkgYW5kIG5vdCAuXG4gKi9cbmV4cG9ydHMucXVldWUgPSB7XG4gICAgc3VibWl0KGlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgd2ViaG9va1VybCwgcGF0aCA9ICcnIH0gPSBvcHRpb25zLCBydW5PcHRpb25zID0gdHNsaWJfMS5fX3Jlc3Qob3B0aW9ucywgW1wid2ViaG9va1VybFwiLCBcInBhdGhcIl0pO1xuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSB3ZWJob29rVXJsXG4gICAgICAgICAgICAgICAgPyAnPycgKyBuZXcgVVJMU2VhcmNoUGFyYW1zKHsgZmFsX3dlYmhvb2s6IHdlYmhvb2tVcmwgfSkudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICByZXR1cm4gc2VuZChpZCwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBydW5PcHRpb25zKSwgeyBzdWJkb21haW46ICdxdWV1ZScsIG1ldGhvZDogJ3Bvc3QnLCBwYXRoOiBwYXRoICsgcXVlcnkgfSkpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHN0YXR1cyhpZCwgeyByZXF1ZXN0SWQsIGxvZ3MgPSBmYWxzZSB9KSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IFthcHBPd25lciwgYXBwQWxpYXNdID0gKDAsIHV0aWxzXzEuZW5zdXJlQXBwSWRGb3JtYXQpKGlkKS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbmQoYCR7YXBwT3duZXJ9LyR7YXBwQWxpYXN9YCwge1xuICAgICAgICAgICAgICAgIHN1YmRvbWFpbjogJ3F1ZXVlJyxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgICAgIHBhdGg6IGAvcmVxdWVzdHMvJHtyZXF1ZXN0SWR9L3N0YXR1c2AsXG4gICAgICAgICAgICAgICAgaW5wdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9nczogbG9ncyA/ICcxJyA6ICcwJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVzdWx0KGlkLCB7IHJlcXVlc3RJZCB9KSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IFthcHBPd25lciwgYXBwQWxpYXNdID0gKDAsIHV0aWxzXzEuZW5zdXJlQXBwSWRGb3JtYXQpKGlkKS5zcGxpdCgnLycpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbmQoYCR7YXBwT3duZXJ9LyR7YXBwQWxpYXN9YCwge1xuICAgICAgICAgICAgICAgIHN1YmRvbWFpbjogJ3F1ZXVlJyxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAgICAgICAgIHBhdGg6IGAvcmVxdWVzdHMvJHtyZXF1ZXN0SWR9YCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIHN1YnNjcmliZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mdW5jdGlvbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJxdWV1ZSIsInN1YnNjcmliZSIsInJ1biIsInNlbmQiLCJidWlsZFVybCIsInRzbGliXzEiLCJyZXF1aXJlIiwicmVxdWVzdF8xIiwic3RvcmFnZV8xIiwidXRpbHNfMSIsImlkIiwib3B0aW9ucyIsIl9hIiwiX2IiLCJtZXRob2QiLCJ0b0xvd2VyQ2FzZSIsInBhdGgiLCJyZXBsYWNlIiwiaW5wdXQiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ1bmRlZmluZWQiLCJxdWVyeVBhcmFtcyIsInRvU3RyaW5nIiwicGFydHMiLCJzcGxpdCIsImlzVmFsaWRVcmwiLCJ1cmwiLCJlbmRzV2l0aCIsImxlbmd0aCIsImlzVVVJRHY0IiwiaG9zdCIsImFwcElkIiwiZW5zdXJlQXBwSWRGb3JtYXQiLCJzdWJkb21haW4iLCJfX2F3YWl0ZXIiLCJhdXRvVXBsb2FkIiwic3RvcmFnZUltcGwiLCJ0cmFuc2Zvcm1JbnB1dCIsImRpc3BhdGNoUmVxdWVzdCIsInJlcXVlc3RfaWQiLCJyZXF1ZXN0SWQiLCJzdWJtaXQiLCJvbkVucXVldWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRpbWVvdXRJZCIsInBvbGxJbnRlcnZhbCIsInBvbGwiLCJyZXF1ZXN0U3RhdHVzIiwic3RhdHVzIiwibG9ncyIsIm9uUXVldWVVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJyZXN1bHQiLCJlcnJvciIsInNldFRpbWVvdXQiLCJjYXRjaCIsIndlYmhvb2tVcmwiLCJydW5PcHRpb25zIiwiX19yZXN0IiwicXVlcnkiLCJmYWxfd2ViaG9vayIsImFzc2lnbiIsImFwcE93bmVyIiwiYXBwQWxpYXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storage = exports.ValidationError = exports.ApiError = exports.realtime = exports.withProxy = exports.withMiddleware = exports.subscribe = exports.run = exports.queue = exports.getConfig = exports.config = void 0;\nvar config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nObject.defineProperty(exports, \"config\", ({\n    enumerable: true,\n    get: function() {\n        return config_1.config;\n    }\n}));\nObject.defineProperty(exports, \"getConfig\", ({\n    enumerable: true,\n    get: function() {\n        return config_1.getConfig;\n    }\n}));\nvar function_1 = __webpack_require__(/*! ./function */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/function.js\");\nObject.defineProperty(exports, \"queue\", ({\n    enumerable: true,\n    get: function() {\n        return function_1.queue;\n    }\n}));\nObject.defineProperty(exports, \"run\", ({\n    enumerable: true,\n    get: function() {\n        return function_1.run;\n    }\n}));\nObject.defineProperty(exports, \"subscribe\", ({\n    enumerable: true,\n    get: function() {\n        return function_1.subscribe;\n    }\n}));\nvar middleware_1 = __webpack_require__(/*! ./middleware */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js\");\nObject.defineProperty(exports, \"withMiddleware\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.withMiddleware;\n    }\n}));\nObject.defineProperty(exports, \"withProxy\", ({\n    enumerable: true,\n    get: function() {\n        return middleware_1.withProxy;\n    }\n}));\nvar realtime_1 = __webpack_require__(/*! ./realtime */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/realtime.js\");\nObject.defineProperty(exports, \"realtime\", ({\n    enumerable: true,\n    get: function() {\n        return realtime_1.realtimeImpl;\n    }\n}));\nvar response_1 = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\");\nObject.defineProperty(exports, \"ApiError\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.ApiError;\n    }\n}));\nObject.defineProperty(exports, \"ValidationError\", ({\n    enumerable: true,\n    get: function() {\n        return response_1.ValidationError;\n    }\n}));\nvar storage_1 = __webpack_require__(/*! ./storage */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js\");\nObject.defineProperty(exports, \"storage\", ({\n    enumerable: true,\n    get: function() {\n        return storage_1.storageImpl;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsdUJBQXVCLEdBQUdBLGdCQUFnQixHQUFHQSxnQkFBZ0IsR0FBR0EsaUJBQWlCLEdBQUdBLHNCQUFzQixHQUFHQSxpQkFBaUIsR0FBR0EsV0FBVyxHQUFHQSxhQUFhLEdBQUdBLGlCQUFpQixHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUMzTixJQUFJYSxXQUFXQyxtQkFBT0EsQ0FBQyw4RUFBVTtBQUNqQ2hCLDBDQUF5QztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0gsU0FBU0QsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHZCw2Q0FBNEM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9ILFNBQVNGLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSCxJQUFJTSxhQUFhSCxtQkFBT0EsQ0FBQyxrRkFBWTtBQUNyQ2hCLHlDQUF3QztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsV0FBV1AsS0FBSztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzVHWix1Q0FBc0M7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFdBQVdSLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4R1gsNkNBQTRDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxXQUFXVCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEgsSUFBSVUsZUFBZUosbUJBQU9BLENBQUMsc0ZBQWM7QUFDekNoQixrREFBaUQ7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLGFBQWFYLGNBQWM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNoSVQsNkNBQTRDO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxhQUFhWixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEgsSUFBSWEsYUFBYUwsbUJBQU9BLENBQUMsa0ZBQVk7QUFDckNoQiw0Q0FBMkM7SUFBRWlCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9HLFdBQVdDLFlBQVk7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN0SCxJQUFJQyxhQUFhUCxtQkFBT0EsQ0FBQyxrRkFBWTtBQUNyQ2hCLDRDQUEyQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ssV0FBV2pCLFFBQVE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSE4sbURBQWtEO0lBQUVpQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSyxXQUFXbEIsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hJLElBQUltQixZQUFZUixtQkFBT0EsQ0FBQyxnRkFBVztBQUNuQ2hCLDJDQUEwQztJQUFFaUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT00sVUFBVUMsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQ25ILGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BmYWwtYWkvc2R4bC1saWdodG5pbmcvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvaW5kZXguanM/YTViYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RvcmFnZSA9IGV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gZXhwb3J0cy5BcGlFcnJvciA9IGV4cG9ydHMucmVhbHRpbWUgPSBleHBvcnRzLndpdGhQcm94eSA9IGV4cG9ydHMud2l0aE1pZGRsZXdhcmUgPSBleHBvcnRzLnN1YnNjcmliZSA9IGV4cG9ydHMucnVuID0gZXhwb3J0cy5xdWV1ZSA9IGV4cG9ydHMuZ2V0Q29uZmlnID0gZXhwb3J0cy5jb25maWcgPSB2b2lkIDA7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25maWdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZ18xLmNvbmZpZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldENvbmZpZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uZmlnXzEuZ2V0Q29uZmlnOyB9IH0pO1xudmFyIGZ1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9mdW5jdGlvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInF1ZXVlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbl8xLnF1ZXVlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicnVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbl8xLnJ1bjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN1YnNjcmliZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb25fMS5zdWJzY3JpYmU7IH0gfSk7XG52YXIgbWlkZGxld2FyZV8xID0gcmVxdWlyZShcIi4vbWlkZGxld2FyZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpdGhNaWRkbGV3YXJlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtaWRkbGV3YXJlXzEud2l0aE1pZGRsZXdhcmU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoUHJveHlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1pZGRsZXdhcmVfMS53aXRoUHJveHk7IH0gfSk7XG52YXIgcmVhbHRpbWVfMSA9IHJlcXVpcmUoXCIuL3JlYWx0aW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVhbHRpbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlYWx0aW1lXzEucmVhbHRpbWVJbXBsOyB9IH0pO1xudmFyIHJlc3BvbnNlXzEgPSByZXF1aXJlKFwiLi9yZXNwb25zZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFwaUVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNwb25zZV8xLkFwaUVycm9yOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsaWRhdGlvbkVycm9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNwb25zZV8xLlZhbGlkYXRpb25FcnJvcjsgfSB9KTtcbnZhciBzdG9yYWdlXzEgPSByZXF1aXJlKFwiLi9zdG9yYWdlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3RvcmFnZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RvcmFnZV8xLnN0b3JhZ2VJbXBsOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic3RvcmFnZSIsIlZhbGlkYXRpb25FcnJvciIsIkFwaUVycm9yIiwicmVhbHRpbWUiLCJ3aXRoUHJveHkiLCJ3aXRoTWlkZGxld2FyZSIsInN1YnNjcmliZSIsInJ1biIsInF1ZXVlIiwiZ2V0Q29uZmlnIiwiY29uZmlnIiwiY29uZmlnXzEiLCJyZXF1aXJlIiwiZW51bWVyYWJsZSIsImdldCIsImZ1bmN0aW9uXzEiLCJtaWRkbGV3YXJlXzEiLCJyZWFsdGltZV8xIiwicmVhbHRpbWVJbXBsIiwicmVzcG9uc2VfMSIsInN0b3JhZ2VfMSIsInN0b3JhZ2VJbXBsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js":
/*!******************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/middleware.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.withProxy = exports.TARGET_URL_HEADER = exports.withMiddleware = void 0;\n/**\n * Setup a execution chain of middleware functions.\n *\n * @param middlewares one or more middleware functions.\n * @returns a middleware function that executes the given middlewares in order.\n */ function withMiddleware(...middlewares) {\n    return (config)=>middlewares.reduce((configPromise, middleware)=>configPromise.then((req)=>middleware(req)), Promise.resolve(config));\n}\nexports.withMiddleware = withMiddleware;\nexports.TARGET_URL_HEADER = \"x-fal-target-url\";\nfunction withProxy(config) {\n    // when running on the server, we don't need to proxy the request\n    if (true) {\n        return (requestConfig)=>Promise.resolve(requestConfig);\n    }\n    return (requestConfig)=>Promise.resolve(Object.assign(Object.assign({}, requestConfig), {\n            url: config.targetUrl,\n            headers: Object.assign(Object.assign({}, requestConfig.headers || {}), {\n                [exports.TARGET_URL_HEADER]: requestConfig.url\n            })\n        }));\n}\nexports.withProxy = withProxy; //# sourceMappingURL=middleware.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvbWlkZGxld2FyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUdBLHlCQUF5QixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLO0FBQzlFOzs7OztDQUtDLEdBQ0QsU0FBU0ksZUFBZSxHQUFHQyxXQUFXO0lBQ2xDLE9BQU8sQ0FBQ0MsU0FBV0QsWUFBWUUsTUFBTSxDQUFDLENBQUNDLGVBQWVDLGFBQWVELGNBQWNFLElBQUksQ0FBQyxDQUFDQyxNQUFRRixXQUFXRSxPQUFPQyxRQUFRQyxPQUFPLENBQUNQO0FBQ3ZJO0FBQ0FOLHNCQUFzQixHQUFHSTtBQUN6QkoseUJBQXlCLEdBQUc7QUFDNUIsU0FBU0UsVUFBVUksTUFBTTtJQUNyQixpRUFBaUU7SUFDakUsSUFBSSxJQUFrQixFQUFhO1FBQy9CLE9BQU8sQ0FBQ1EsZ0JBQWtCRixRQUFRQyxPQUFPLENBQUNDO0lBQzlDO0lBQ0EsT0FBTyxDQUFDQSxnQkFBa0JGLFFBQVFDLE9BQU8sQ0FBQ2YsT0FBT2lCLE1BQU0sQ0FBQ2pCLE9BQU9pQixNQUFNLENBQUMsQ0FBQyxHQUFHRCxnQkFBZ0I7WUFBRUUsS0FBS1YsT0FBT1csU0FBUztZQUFFQyxTQUFTcEIsT0FBT2lCLE1BQU0sQ0FBQ2pCLE9BQU9pQixNQUFNLENBQUMsQ0FBQyxHQUFJRCxjQUFjSSxPQUFPLElBQUksQ0FBQyxJQUFLO2dCQUFFLENBQUNsQixRQUFRRyxpQkFBaUIsQ0FBQyxFQUFFVyxjQUFjRSxHQUFHO1lBQUM7UUFBRztBQUNwUDtBQUNBaEIsaUJBQWlCLEdBQUdFLFdBQ3BCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BmYWwtYWkvc2R4bC1saWdodG5pbmcvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvbWlkZGxld2FyZS5qcz9mNzMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aXRoUHJveHkgPSBleHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSID0gZXhwb3J0cy53aXRoTWlkZGxld2FyZSA9IHZvaWQgMDtcbi8qKlxuICogU2V0dXAgYSBleGVjdXRpb24gY2hhaW4gb2YgbWlkZGxld2FyZSBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIG1pZGRsZXdhcmVzIG9uZSBvciBtb3JlIG1pZGRsZXdhcmUgZnVuY3Rpb25zLlxuICogQHJldHVybnMgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZXMgdGhlIGdpdmVuIG1pZGRsZXdhcmVzIGluIG9yZGVyLlxuICovXG5mdW5jdGlvbiB3aXRoTWlkZGxld2FyZSguLi5taWRkbGV3YXJlcykge1xuICAgIHJldHVybiAoY29uZmlnKSA9PiBtaWRkbGV3YXJlcy5yZWR1Y2UoKGNvbmZpZ1Byb21pc2UsIG1pZGRsZXdhcmUpID0+IGNvbmZpZ1Byb21pc2UudGhlbigocmVxKSA9PiBtaWRkbGV3YXJlKHJlcSkpLCBQcm9taXNlLnJlc29sdmUoY29uZmlnKSk7XG59XG5leHBvcnRzLndpdGhNaWRkbGV3YXJlID0gd2l0aE1pZGRsZXdhcmU7XG5leHBvcnRzLlRBUkdFVF9VUkxfSEVBREVSID0gJ3gtZmFsLXRhcmdldC11cmwnO1xuZnVuY3Rpb24gd2l0aFByb3h5KGNvbmZpZykge1xuICAgIC8vIHdoZW4gcnVubmluZyBvbiB0aGUgc2VydmVyLCB3ZSBkb24ndCBuZWVkIHRvIHByb3h5IHRoZSByZXF1ZXN0XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAocmVxdWVzdENvbmZpZykgPT4gUHJvbWlzZS5yZXNvbHZlKHJlcXVlc3RDb25maWcpO1xuICAgIH1cbiAgICByZXR1cm4gKHJlcXVlc3RDb25maWcpID0+IFByb21pc2UucmVzb2x2ZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3RDb25maWcpLCB7IHVybDogY29uZmlnLnRhcmdldFVybCwgaGVhZGVyczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCAocmVxdWVzdENvbmZpZy5oZWFkZXJzIHx8IHt9KSksIHsgW2V4cG9ydHMuVEFSR0VUX1VSTF9IRUFERVJdOiByZXF1ZXN0Q29uZmlnLnVybCB9KSB9KSk7XG59XG5leHBvcnRzLndpdGhQcm94eSA9IHdpdGhQcm94eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pZGRsZXdhcmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid2l0aFByb3h5IiwiVEFSR0VUX1VSTF9IRUFERVIiLCJ3aXRoTWlkZGxld2FyZSIsIm1pZGRsZXdhcmVzIiwiY29uZmlnIiwicmVkdWNlIiwiY29uZmlnUHJvbWlzZSIsIm1pZGRsZXdhcmUiLCJ0aGVuIiwicmVxIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXF1ZXN0Q29uZmlnIiwiYXNzaWduIiwidXJsIiwidGFyZ2V0VXJsIiwiaGVhZGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/middleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/realtime.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/realtime.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.realtimeImpl = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ const msgpack_1 = __webpack_require__(/*! @msgpack/msgpack */ \"(ssr)/./node_modules/@msgpack/msgpack/dist.es5+esm/index.mjs\");\nconst robot3_1 = __webpack_require__(/*! robot3 */ \"(ssr)/./node_modules/robot3/dist/machine.js\");\nconst uuid_random_1 = tslib_1.__importDefault(__webpack_require__(/*! uuid-random */ \"(ssr)/./node_modules/uuid-random/index.js\"));\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\");\nconst response_1 = __webpack_require__(/*! ./response */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\");\nconst initialState = ()=>({\n        enqueuedMessage: undefined\n    });\nfunction hasToken(context) {\n    return context.token !== undefined;\n}\nfunction noToken(context) {\n    return !hasToken(context);\n}\nfunction enqueueMessage(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        enqueuedMessage: event.message\n    });\n}\nfunction closeConnection(context) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        context.websocket.close();\n    }\n    return Object.assign(Object.assign({}, context), {\n        websocket: undefined\n    });\n}\nfunction sendMessage(context, event) {\n    if (context.websocket && context.websocket.readyState === WebSocket.OPEN) {\n        if (event.message instanceof Uint8Array) {\n            context.websocket.send(event.message);\n        } else if (shouldSendBinary(event.message)) {\n            context.websocket.send((0, msgpack_1.encode)(event.message));\n        } else {\n            context.websocket.send(JSON.stringify(event.message));\n        }\n        return Object.assign(Object.assign({}, context), {\n            enqueuedMessage: undefined\n        });\n    }\n    return Object.assign(Object.assign({}, context), {\n        enqueuedMessage: event.message\n    });\n}\nfunction expireToken(context) {\n    return Object.assign(Object.assign({}, context), {\n        token: undefined\n    });\n}\nfunction setToken(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        token: event.token\n    });\n}\nfunction connectionEstablished(context, event) {\n    return Object.assign(Object.assign({}, context), {\n        websocket: event.websocket\n    });\n}\n// State machine\nconst connectionStateMachine = (0, robot3_1.createMachine)(\"idle\", {\n    idle: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.transition)(\"expireToken\", \"idle\", (0, robot3_1.reduce)(expireToken))),\n    connecting: (0, robot3_1.state)((0, robot3_1.transition)(\"connecting\", \"connecting\"), (0, robot3_1.transition)(\"connected\", \"active\", (0, robot3_1.reduce)(connectionEstablished)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"connecting\", (0, robot3_1.reduce)(enqueueMessage)), (0, robot3_1.immediate)(\"authRequired\", (0, robot3_1.guard)(noToken))),\n    authRequired: (0, robot3_1.state)((0, robot3_1.transition)(\"initiateAuth\", \"authInProgress\"), (0, robot3_1.transition)(\"send\", \"authRequired\", (0, robot3_1.reduce)(enqueueMessage))),\n    authInProgress: (0, robot3_1.state)((0, robot3_1.transition)(\"authenticated\", \"connecting\", (0, robot3_1.reduce)(setToken)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken), (0, robot3_1.reduce)(closeConnection)), (0, robot3_1.transition)(\"send\", \"authInProgress\", (0, robot3_1.reduce)(enqueueMessage))),\n    active: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"active\", (0, robot3_1.reduce)(sendMessage)), (0, robot3_1.transition)(\"unauthorized\", \"idle\", (0, robot3_1.reduce)(expireToken)), (0, robot3_1.transition)(\"connectionClosed\", \"idle\", (0, robot3_1.reduce)(closeConnection))),\n    failed: (0, robot3_1.state)((0, robot3_1.transition)(\"send\", \"failed\"))\n}, initialState);\n// This is a list of apps deployed before formal realtime support. Their URLs follow\n// a different pattern and will be kept here until we fully sunset them.\nconst LEGACY_APPS = [\n    \"lcm-sd15-i2i\",\n    \"lcm\",\n    \"sdxl-turbo-realtime\",\n    \"sd-turbo-real-time-high-fps-msgpack-a10g\",\n    \"lcm-plexed-sd15-i2i\",\n    \"sd-turbo-real-time-high-fps-msgpack\"\n];\nfunction buildRealtimeUrl(app, { token, maxBuffering }) {\n    if (maxBuffering !== undefined && (maxBuffering < 1 || maxBuffering > 60)) {\n        throw new Error(\"The `maxBuffering` must be between 1 and 60 (inclusive)\");\n    }\n    const queryParams = new URLSearchParams({\n        fal_jwt_token: token\n    });\n    if (maxBuffering !== undefined) {\n        queryParams.set(\"max_buffering\", maxBuffering.toFixed(0));\n    }\n    const appId = (0, utils_1.ensureAppIdFormat)(app);\n    const [, appAlias] = (0, utils_1.ensureAppIdFormat)(app).split(\"/\");\n    const suffix = LEGACY_APPS.includes(appAlias) || !app.includes(\"/\") ? \"ws\" : \"realtime\";\n    return `wss://fal.run/${appId}/${suffix}?${queryParams.toString()}`;\n}\nconst TOKEN_EXPIRATION_SECONDS = 120;\nconst DEFAULT_THROTTLE_INTERVAL = 128;\nfunction shouldSendBinary(message) {\n    return Object.values(message).some((value)=>value instanceof Blob || value instanceof ArrayBuffer || value instanceof Uint8Array);\n}\n/**\n * Get a token to connect to the realtime endpoint.\n */ function getToken(app) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const [, appAlias] = (0, utils_1.ensureAppIdFormat)(app).split(\"/\");\n        const token = yield (0, request_1.dispatchRequest)(\"POST\", `${(0, config_1.getRestApiUrl)()}/tokens/`, {\n            allowed_apps: [\n                appAlias\n            ],\n            token_expiration: TOKEN_EXPIRATION_SECONDS\n        });\n        // keep this in case the response was wrapped (old versions of the proxy do that)\n        // should be safe to remove in the future\n        if (typeof token !== \"string\" && token[\"detail\"]) {\n            return token[\"detail\"];\n        }\n        return token;\n    });\n}\nfunction isUnauthorizedError(message) {\n    // TODO we need better protocol definition with error codes\n    return message[\"status\"] === \"error\" && message[\"error\"] === \"Unauthorized\";\n}\n/**\n * See https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n */ const WebSocketErrorCodes = {\n    NORMAL_CLOSURE: 1000,\n    GOING_AWAY: 1001\n};\nconst connectionCache = new Map();\nconst connectionCallbacks = new Map();\nfunction reuseInterpreter(key, throttleInterval, onChange) {\n    if (!connectionCache.has(key)) {\n        const machine = (0, robot3_1.interpret)(connectionStateMachine, onChange);\n        connectionCache.set(key, Object.assign(Object.assign({}, machine), {\n            throttledSend: throttleInterval > 0 ? (0, utils_1.throttle)(machine.send, throttleInterval, true) : machine.send\n        }));\n    }\n    return connectionCache.get(key);\n}\nconst noop = ()=>{\n/* No-op */ };\n/**\n * A no-op connection that does not send any message.\n * Useful on the frameworks that reuse code for both ssr and csr (e.g. Next)\n * so the call when doing ssr has no side-effects.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst NoOpConnection = {\n    send: noop,\n    close: noop\n};\nfunction isSuccessfulResult(data) {\n    return data.status !== \"error\" && data.type !== \"x-fal-message\" && !isFalErrorResult(data);\n}\nfunction isFalErrorResult(data) {\n    return data.type === \"x-fal-error\";\n}\n/**\n * The default implementation of the realtime client.\n */ exports.realtimeImpl = {\n    connect (app, handler) {\n        const { // if running on React in the server, set clientOnly to true by default\n        clientOnly = (0, utils_1.isReact)() && !(0, runtime_1.isBrowser)(), connectionKey = (0, uuid_random_1.default)(), maxBuffering, throttleInterval = DEFAULT_THROTTLE_INTERVAL } = handler;\n        if (clientOnly && !(0, runtime_1.isBrowser)()) {\n            return NoOpConnection;\n        }\n        let previousState;\n        // Although the state machine is cached so we don't open multiple connections,\n        // we still need to update the callbacks so we can call the correct references\n        // when the state machine is reused. This is needed because the callbacks\n        // are passed as part of the handler object, which can be different across\n        // different calls to `connect`.\n        connectionCallbacks.set(connectionKey, {\n            onError: handler.onError,\n            onResult: handler.onResult\n        });\n        const getCallbacks = ()=>connectionCallbacks.get(connectionKey);\n        const stateMachine = reuseInterpreter(connectionKey, throttleInterval, ({ context, machine, send })=>{\n            const { enqueuedMessage, token } = context;\n            if (machine.current === \"active\" && enqueuedMessage) {\n                send({\n                    type: \"send\",\n                    message: enqueuedMessage\n                });\n            }\n            if (machine.current === \"authRequired\" && token === undefined && previousState !== machine.current) {\n                send({\n                    type: \"initiateAuth\"\n                });\n                getToken(app).then((token)=>{\n                    send({\n                        type: \"authenticated\",\n                        token\n                    });\n                    const tokenExpirationTimeout = Math.round(TOKEN_EXPIRATION_SECONDS * 0.9 * 1000);\n                    setTimeout(()=>{\n                        send({\n                            type: \"expireToken\"\n                        });\n                    }, tokenExpirationTimeout);\n                }).catch((error)=>{\n                    send({\n                        type: \"unauthorized\",\n                        error\n                    });\n                });\n            }\n            if (machine.current === \"connecting\" && previousState !== machine.current && token !== undefined) {\n                const ws = new WebSocket(buildRealtimeUrl(app, {\n                    token,\n                    maxBuffering\n                }));\n                ws.onopen = ()=>{\n                    send({\n                        type: \"connected\",\n                        websocket: ws\n                    });\n                };\n                ws.onclose = (event)=>{\n                    if (event.code !== WebSocketErrorCodes.NORMAL_CLOSURE) {\n                        const { onError = noop } = getCallbacks();\n                        onError(new response_1.ApiError({\n                            message: `Error closing the connection: ${event.reason}`,\n                            status: event.code\n                        }));\n                    }\n                    send({\n                        type: \"connectionClosed\",\n                        code: event.code\n                    });\n                };\n                ws.onerror = (event)=>{\n                    // TODO specify error protocol for identified errors\n                    const { onError = noop } = getCallbacks();\n                    onError(new response_1.ApiError({\n                        message: \"Unknown error\",\n                        status: 500\n                    }));\n                };\n                ws.onmessage = (event)=>{\n                    const { onResult } = getCallbacks();\n                    // Handle binary messages as msgpack messages\n                    if (event.data instanceof ArrayBuffer) {\n                        const result = (0, msgpack_1.decode)(new Uint8Array(event.data));\n                        onResult(result);\n                        return;\n                    }\n                    if (event.data instanceof Uint8Array) {\n                        const result = (0, msgpack_1.decode)(event.data);\n                        onResult(result);\n                        return;\n                    }\n                    if (event.data instanceof Blob) {\n                        event.data.arrayBuffer().then((buffer)=>{\n                            const result = (0, msgpack_1.decode)(new Uint8Array(buffer));\n                            onResult(result);\n                        });\n                        return;\n                    }\n                    // Otherwise handle strings as plain JSON messages\n                    const data = JSON.parse(event.data);\n                    // Drop messages that are not related to the actual result.\n                    // In the future, we might want to handle other types of messages.\n                    // TODO: specify the fal ws protocol format\n                    if (isUnauthorizedError(data)) {\n                        send({\n                            type: \"unauthorized\",\n                            error: new Error(\"Unauthorized\")\n                        });\n                        return;\n                    }\n                    if (isSuccessfulResult(data)) {\n                        onResult(data);\n                        return;\n                    }\n                    if (isFalErrorResult(data)) {\n                        const { onError = noop } = getCallbacks();\n                        onError(new response_1.ApiError({\n                            message: `${data.error}: ${data.reason}`,\n                            // TODO better error status code\n                            status: 400,\n                            body: data\n                        }));\n                        return;\n                    }\n                };\n            }\n            previousState = machine.current;\n        });\n        const send = (input)=>{\n            // Use throttled send to avoid sending too many messages\n            var _a;\n            const message = input instanceof Uint8Array ? input : Object.assign(Object.assign({}, input), {\n                request_id: (_a = input[\"request_id\"]) !== null && _a !== void 0 ? _a : (0, uuid_random_1.default)()\n            });\n            stateMachine.throttledSend({\n                type: \"send\",\n                message\n            });\n        };\n        const close = ()=>{\n            stateMachine.send({\n                type: \"close\"\n            });\n        };\n        return {\n            send,\n            close\n        };\n    }\n}; //# sourceMappingURL=realtime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/realtime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js":
/*!***************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/request.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dispatchRequest = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nconst runtime_1 = __webpack_require__(/*! ./runtime */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js\");\nconst isCloudflareWorkers = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === \"Cloudflare-Workers\";\nfunction dispatchRequest(method, targetUrl, input) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const { credentials: credentialsValue, requestMiddleware, responseHandler } = (0, config_1.getConfig)();\n        const userAgent = (0, runtime_1.isBrowser)() ? {} : {\n            \"User-Agent\": (0, runtime_1.getUserAgent)()\n        };\n        const credentials = typeof credentialsValue === \"function\" ? credentialsValue() : credentialsValue;\n        const { url, headers } = yield requestMiddleware({\n            url: targetUrl\n        });\n        const authHeader = credentials ? {\n            Authorization: `Key ${credentials}`\n        } : {};\n        if (false) {}\n        const requestHeaders = Object.assign(Object.assign(Object.assign(Object.assign({}, authHeader), {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }), userAgent), headers !== null && headers !== void 0 ? headers : {});\n        const response = yield fetch(url, Object.assign(Object.assign({\n            method,\n            headers: requestHeaders\n        }, !isCloudflareWorkers && {\n            mode: \"cors\"\n        }), {\n            body: method.toLowerCase() !== \"get\" && input ? JSON.stringify(input) : undefined\n        }));\n        return yield responseHandler(response);\n    });\n}\nexports.dispatchRequest = dispatchRequest; //# sourceMappingURL=request.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcmVxdWVzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUcsS0FBSztBQUMvQixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyx1REFBTztBQUMvQixNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQyw4RUFBVTtBQUNuQyxNQUFNRSxZQUFZRixtQkFBT0EsQ0FBQyxnRkFBVztBQUNyQyxNQUFNRyxzQkFBc0IsT0FBT0MsY0FBYyxlQUM3QyxDQUFDQSxjQUFjLFFBQVFBLGNBQWMsS0FBSyxJQUFJLEtBQUssSUFBSUEsVUFBVUMsU0FBUyxNQUFNO0FBQ3BGLFNBQVNQLGdCQUFnQlEsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLEtBQUs7SUFDN0MsT0FBT1QsUUFBUVUsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1FBQzNDLE1BQU0sRUFBRUMsYUFBYUMsZ0JBQWdCLEVBQUVDLGlCQUFpQixFQUFFQyxlQUFlLEVBQUcsR0FBRyxDQUFDLEdBQUdaLFNBQVNhLFNBQVM7UUFDckcsTUFBTVQsWUFBWSxDQUFDLEdBQUdILFVBQVVhLFNBQVMsTUFBTSxDQUFDLElBQUk7WUFBRSxjQUFjLENBQUMsR0FBR2IsVUFBVWMsWUFBWTtRQUFJO1FBQ2xHLE1BQU1OLGNBQWMsT0FBT0MscUJBQXFCLGFBQzFDQSxxQkFDQUE7UUFDTixNQUFNLEVBQUVNLEdBQUcsRUFBRUMsT0FBTyxFQUFFLEdBQUcsTUFBTU4sa0JBQWtCO1lBQzdDSyxLQUFLVjtRQUNUO1FBQ0EsTUFBTVksYUFBYVQsY0FBYztZQUFFVSxlQUFlLENBQUMsSUFBSSxFQUFFVixZQUFZLENBQUM7UUFBQyxJQUFJLENBQUM7UUFDNUUsSUFBSSxLQUE0Q0EsRUFBRSxFQUdqRDtRQUNELE1BQU1hLGlCQUFpQjdCLE9BQU84QixNQUFNLENBQUM5QixPQUFPOEIsTUFBTSxDQUFDOUIsT0FBTzhCLE1BQU0sQ0FBQzlCLE9BQU84QixNQUFNLENBQUMsQ0FBQyxHQUFHTCxhQUFhO1lBQUVNLFFBQVE7WUFBb0IsZ0JBQWdCO1FBQW1CLElBQUlwQixZQUFhYSxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJQSxVQUFVLENBQUM7UUFDdE8sTUFBTVEsV0FBVyxNQUFNQyxNQUFNVixLQUFLdkIsT0FBTzhCLE1BQU0sQ0FBQzlCLE9BQU84QixNQUFNLENBQUM7WUFBRWxCO1lBQVFZLFNBQVNLO1FBQWUsR0FBSSxDQUFDcEIsdUJBQXVCO1lBQUV5QixNQUFNO1FBQU8sSUFBSztZQUFFQyxNQUFNdkIsT0FBT3dCLFdBQVcsT0FBTyxTQUFTdEIsUUFDaEx1QixLQUFLQyxTQUFTLENBQUN4QixTQUNmeUI7UUFBVTtRQUNwQixPQUFPLE1BQU1wQixnQkFBZ0JhO0lBQ2pDO0FBQ0o7QUFDQTlCLHVCQUF1QixHQUFHRSxpQkFDMUIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGZhbC1haS9zZHhsLWxpZ2h0bmluZy8uL25vZGVfbW9kdWxlcy9AZmFsLWFpL3NlcnZlcmxlc3MtY2xpZW50L3NyYy9yZXF1ZXN0LmpzP2ZiYTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRpc3BhdGNoUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBjb25maWdfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ1wiKTtcbmNvbnN0IHJ1bnRpbWVfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5jb25zdCBpc0Nsb3VkZmxhcmVXb3JrZXJzID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAobmF2aWdhdG9yID09PSBudWxsIHx8IG5hdmlnYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmF2aWdhdG9yLnVzZXJBZ2VudCkgPT09ICdDbG91ZGZsYXJlLVdvcmtlcnMnO1xuZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KG1ldGhvZCwgdGFyZ2V0VXJsLCBpbnB1dCkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgeyBjcmVkZW50aWFsczogY3JlZGVudGlhbHNWYWx1ZSwgcmVxdWVzdE1pZGRsZXdhcmUsIHJlc3BvbnNlSGFuZGxlciwgfSA9ICgwLCBjb25maWdfMS5nZXRDb25maWcpKCk7XG4gICAgICAgIGNvbnN0IHVzZXJBZ2VudCA9ICgwLCBydW50aW1lXzEuaXNCcm93c2VyKSgpID8ge30gOiB7ICdVc2VyLUFnZW50JzogKDAsIHJ1bnRpbWVfMS5nZXRVc2VyQWdlbnQpKCkgfTtcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHMgPSB0eXBlb2YgY3JlZGVudGlhbHNWYWx1ZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBjcmVkZW50aWFsc1ZhbHVlKClcbiAgICAgICAgICAgIDogY3JlZGVudGlhbHNWYWx1ZTtcbiAgICAgICAgY29uc3QgeyB1cmwsIGhlYWRlcnMgfSA9IHlpZWxkIHJlcXVlc3RNaWRkbGV3YXJlKHtcbiAgICAgICAgICAgIHVybDogdGFyZ2V0VXJsLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IGNyZWRlbnRpYWxzID8geyBBdXRob3JpemF0aW9uOiBgS2V5ICR7Y3JlZGVudGlhbHN9YCB9IDoge307XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBjcmVkZW50aWFscykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGZhbCBjcmVkZW50aWFscyBhcmUgZXhwb3NlZCBpbiB0aGUgYnJvd3NlcidzIGVudmlyb25tZW50LiBcIiArXG4gICAgICAgICAgICAgICAgXCJUaGF0J3Mgbm90IHJlY29tbWVuZGVkIGZvciBwcm9kdWN0aW9uIHVzZSBjYXNlcy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVxdWVzdEhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhdXRoSGVhZGVyKSwgeyBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJywgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KSwgdXNlckFnZW50KSwgKGhlYWRlcnMgIT09IG51bGwgJiYgaGVhZGVycyAhPT0gdm9pZCAwID8gaGVhZGVycyA6IHt9KSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2godXJsLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2QsIGhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzIH0sICghaXNDbG91ZGZsYXJlV29ya2VycyAmJiB7IG1vZGU6ICdjb3JzJyB9KSksIHsgYm9keTogbWV0aG9kLnRvTG93ZXJDYXNlKCkgIT09ICdnZXQnICYmIGlucHV0XG4gICAgICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShpbnB1dClcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCB9KSk7XG4gICAgICAgIHJldHVybiB5aWVsZCByZXNwb25zZUhhbmRsZXIocmVzcG9uc2UpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kaXNwYXRjaFJlcXVlc3QgPSBkaXNwYXRjaFJlcXVlc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRpc3BhdGNoUmVxdWVzdCIsInRzbGliXzEiLCJyZXF1aXJlIiwiY29uZmlnXzEiLCJydW50aW1lXzEiLCJpc0Nsb3VkZmxhcmVXb3JrZXJzIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWV0aG9kIiwidGFyZ2V0VXJsIiwiaW5wdXQiLCJfX2F3YWl0ZXIiLCJjcmVkZW50aWFscyIsImNyZWRlbnRpYWxzVmFsdWUiLCJyZXF1ZXN0TWlkZGxld2FyZSIsInJlc3BvbnNlSGFuZGxlciIsImdldENvbmZpZyIsImlzQnJvd3NlciIsImdldFVzZXJBZ2VudCIsInVybCIsImhlYWRlcnMiLCJhdXRoSGVhZGVyIiwiQXV0aG9yaXphdGlvbiIsImNvbnNvbGUiLCJ3YXJuIiwicmVxdWVzdEhlYWRlcnMiLCJhc3NpZ24iLCJBY2NlcHQiLCJyZXNwb25zZSIsImZldGNoIiwibW9kZSIsImJvZHkiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js":
/*!****************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/response.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultResponseHandler = exports.ValidationError = exports.ApiError = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nclass ApiError extends Error {\n    constructor({ message, status, body }){\n        super(message);\n        this.name = \"ApiError\";\n        this.status = status;\n        this.body = body;\n    }\n}\nexports.ApiError = ApiError;\nclass ValidationError extends ApiError {\n    constructor(args){\n        super(args);\n        this.name = \"ValidationError\";\n    }\n    get fieldErrors() {\n        // NOTE: this is a hack to support both FastAPI/Pydantic errors\n        // and some custom 422 errors that might not be in the Pydantic format.\n        if (typeof this.body.detail === \"string\") {\n            return [\n                {\n                    loc: [\n                        \"body\"\n                    ],\n                    msg: this.body.detail,\n                    type: \"value_error\"\n                }\n            ];\n        }\n        return this.body.detail || [];\n    }\n    getFieldErrors(field) {\n        return this.fieldErrors.filter((error)=>error.loc[error.loc.length - 1] === field);\n    }\n}\nexports.ValidationError = ValidationError;\nfunction defaultResponseHandler(response) {\n    var _a;\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const { status, statusText } = response;\n        const contentType = (_a = response.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"\";\n        if (!response.ok) {\n            if (contentType.includes(\"application/json\")) {\n                const body = yield response.json();\n                const ErrorType = status === 422 ? ValidationError : ApiError;\n                throw new ErrorType({\n                    message: body.message || statusText,\n                    status,\n                    body\n                });\n            }\n            throw new ApiError({\n                message: `HTTP ${status}: ${statusText}`,\n                status\n            });\n        }\n        if (contentType.includes(\"application/json\")) {\n            return response.json();\n        }\n        if (contentType.includes(\"text/html\")) {\n            return response.text();\n        }\n        if (contentType.includes(\"application/octet-stream\")) {\n            return response.arrayBuffer();\n        }\n        // TODO convert to either number or bool automatically\n        return response.text();\n    });\n}\nexports.defaultResponseHandler = defaultResponseHandler; //# sourceMappingURL=response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDhCQUE4QixHQUFHQSx1QkFBdUIsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUNuRixNQUFNSyxVQUFVQyxtQkFBT0EsQ0FBQyx1REFBTztBQUMvQixNQUFNRixpQkFBaUJHO0lBQ25CQyxZQUFZLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUUsQ0FBRTtRQUNuQyxLQUFLLENBQUNGO1FBQ04sSUFBSSxDQUFDRyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNGLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLElBQUksR0FBR0E7SUFDaEI7QUFDSjtBQUNBWCxnQkFBZ0IsR0FBR0k7QUFDbkIsTUFBTUQsd0JBQXdCQztJQUMxQkksWUFBWUssSUFBSSxDQUFFO1FBQ2QsS0FBSyxDQUFDQTtRQUNOLElBQUksQ0FBQ0QsSUFBSSxHQUFHO0lBQ2hCO0lBQ0EsSUFBSUUsY0FBYztRQUNkLCtEQUErRDtRQUMvRCx1RUFBdUU7UUFDdkUsSUFBSSxPQUFPLElBQUksQ0FBQ0gsSUFBSSxDQUFDSSxNQUFNLEtBQUssVUFBVTtZQUN0QyxPQUFPO2dCQUNIO29CQUNJQyxLQUFLO3dCQUFDO3FCQUFPO29CQUNiQyxLQUFLLElBQUksQ0FBQ04sSUFBSSxDQUFDSSxNQUFNO29CQUNyQkcsTUFBTTtnQkFDVjthQUNIO1FBQ0w7UUFDQSxPQUFPLElBQUksQ0FBQ1AsSUFBSSxDQUFDSSxNQUFNLElBQUksRUFBRTtJQUNqQztJQUNBSSxlQUFlQyxLQUFLLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNOLFdBQVcsQ0FBQ08sTUFBTSxDQUFDLENBQUNDLFFBQVVBLE1BQU1OLEdBQUcsQ0FBQ00sTUFBTU4sR0FBRyxDQUFDTyxNQUFNLEdBQUcsRUFBRSxLQUFLSDtJQUNsRjtBQUNKO0FBQ0FwQix1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU0QsdUJBQXVCc0IsUUFBUTtJQUNwQyxJQUFJQztJQUNKLE9BQU9wQixRQUFRcUIsU0FBUyxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHO1FBQzNDLE1BQU0sRUFBRWhCLE1BQU0sRUFBRWlCLFVBQVUsRUFBRSxHQUFHSDtRQUMvQixNQUFNSSxjQUFjLENBQUNILEtBQUtELFNBQVNLLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGVBQWMsTUFBTyxRQUFRTCxPQUFPLEtBQUssSUFBSUEsS0FBSztRQUNqRyxJQUFJLENBQUNELFNBQVNPLEVBQUUsRUFBRTtZQUNkLElBQUlILFlBQVlJLFFBQVEsQ0FBQyxxQkFBcUI7Z0JBQzFDLE1BQU1yQixPQUFPLE1BQU1hLFNBQVNTLElBQUk7Z0JBQ2hDLE1BQU1DLFlBQVl4QixXQUFXLE1BQU1QLGtCQUFrQkM7Z0JBQ3JELE1BQU0sSUFBSThCLFVBQVU7b0JBQ2hCekIsU0FBU0UsS0FBS0YsT0FBTyxJQUFJa0I7b0JBQ3pCakI7b0JBQ0FDO2dCQUNKO1lBQ0o7WUFDQSxNQUFNLElBQUlQLFNBQVM7Z0JBQUVLLFNBQVMsQ0FBQyxLQUFLLEVBQUVDLE9BQU8sRUFBRSxFQUFFaUIsV0FBVyxDQUFDO2dCQUFFakI7WUFBTztRQUMxRTtRQUNBLElBQUlrQixZQUFZSSxRQUFRLENBQUMscUJBQXFCO1lBQzFDLE9BQU9SLFNBQVNTLElBQUk7UUFDeEI7UUFDQSxJQUFJTCxZQUFZSSxRQUFRLENBQUMsY0FBYztZQUNuQyxPQUFPUixTQUFTVyxJQUFJO1FBQ3hCO1FBQ0EsSUFBSVAsWUFBWUksUUFBUSxDQUFDLDZCQUE2QjtZQUNsRCxPQUFPUixTQUFTWSxXQUFXO1FBQy9CO1FBQ0Esc0RBQXNEO1FBQ3RELE9BQU9aLFNBQVNXLElBQUk7SUFDeEI7QUFDSjtBQUNBbkMsOEJBQThCLEdBQUdFLHdCQUNqQyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZmFsLWFpL3NkeGwtbGlnaHRuaW5nLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1jbGllbnQvc3JjL3Jlc3BvbnNlLmpzPzQyMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRSZXNwb25zZUhhbmRsZXIgPSBleHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IGV4cG9ydHMuQXBpRXJyb3IgPSB2b2lkIDA7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xuY2xhc3MgQXBpRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBtZXNzYWdlLCBzdGF0dXMsIGJvZHkgfSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ0FwaUVycm9yJztcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgfVxufVxuZXhwb3J0cy5BcGlFcnJvciA9IEFwaUVycm9yO1xuY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgQXBpRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICAgICAgc3VwZXIoYXJncyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InO1xuICAgIH1cbiAgICBnZXQgZmllbGRFcnJvcnMoKSB7XG4gICAgICAgIC8vIE5PVEU6IHRoaXMgaXMgYSBoYWNrIHRvIHN1cHBvcnQgYm90aCBGYXN0QVBJL1B5ZGFudGljIGVycm9yc1xuICAgICAgICAvLyBhbmQgc29tZSBjdXN0b20gNDIyIGVycm9ycyB0aGF0IG1pZ2h0IG5vdCBiZSBpbiB0aGUgUHlkYW50aWMgZm9ybWF0LlxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYm9keS5kZXRhaWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jOiBbJ2JvZHknXSxcbiAgICAgICAgICAgICAgICAgICAgbXNnOiB0aGlzLmJvZHkuZGV0YWlsLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndmFsdWVfZXJyb3InLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJvZHkuZGV0YWlsIHx8IFtdO1xuICAgIH1cbiAgICBnZXRGaWVsZEVycm9ycyhmaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZEVycm9ycy5maWx0ZXIoKGVycm9yKSA9PiBlcnJvci5sb2NbZXJyb3IubG9jLmxlbmd0aCAtIDFdID09PSBmaWVsZCk7XG4gICAgfVxufVxuZXhwb3J0cy5WYWxpZGF0aW9uRXJyb3IgPSBWYWxpZGF0aW9uRXJyb3I7XG5mdW5jdGlvbiBkZWZhdWx0UmVzcG9uc2VIYW5kbGVyKHJlc3BvbnNlKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0dXMsIHN0YXR1c1RleHQgfSA9IHJlc3BvbnNlO1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IChfYSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGlmIChjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IHlpZWxkIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCBFcnJvclR5cGUgPSBzdGF0dXMgPT09IDQyMiA/IFZhbGlkYXRpb25FcnJvciA6IEFwaUVycm9yO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvclR5cGUoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBib2R5Lm1lc3NhZ2UgfHwgc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKHsgbWVzc2FnZTogYEhUVFAgJHtzdGF0dXN9OiAke3N0YXR1c1RleHR9YCwgc3RhdHVzIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50VHlwZS5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50VHlwZS5pbmNsdWRlcygndGV4dC9odG1sJykpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlLmluY2x1ZGVzKCdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETyBjb252ZXJ0IHRvIGVpdGhlciBudW1iZXIgb3IgYm9vbCBhdXRvbWF0aWNhbGx5XG4gICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmRlZmF1bHRSZXNwb25zZUhhbmRsZXIgPSBkZWZhdWx0UmVzcG9uc2VIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzcG9uc2UuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdFJlc3BvbnNlSGFuZGxlciIsIlZhbGlkYXRpb25FcnJvciIsIkFwaUVycm9yIiwidHNsaWJfMSIsInJlcXVpcmUiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInN0YXR1cyIsImJvZHkiLCJuYW1lIiwiYXJncyIsImZpZWxkRXJyb3JzIiwiZGV0YWlsIiwibG9jIiwibXNnIiwidHlwZSIsImdldEZpZWxkRXJyb3JzIiwiZmllbGQiLCJmaWx0ZXIiLCJlcnJvciIsImxlbmd0aCIsInJlc3BvbnNlIiwiX2EiLCJfX2F3YWl0ZXIiLCJzdGF0dXNUZXh0IiwiY29udGVudFR5cGUiLCJoZWFkZXJzIiwiZ2V0Iiwib2siLCJpbmNsdWRlcyIsImpzb24iLCJFcnJvclR5cGUiLCJ0ZXh0IiwiYXJyYXlCdWZmZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js":
/*!***************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/runtime.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/* eslint-disable @typescript-eslint/no-var-requires */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUserAgent = exports.isBrowser = void 0;\nfunction isBrowser() {\n    return  false && 0;\n}\nexports.isBrowser = isBrowser;\nlet memoizedUserAgent = null;\nfunction getUserAgent() {\n    if (memoizedUserAgent !== null) {\n        return memoizedUserAgent;\n    }\n    const packageInfo = __webpack_require__(/*! ../package.json */ \"(ssr)/./node_modules/@fal-ai/serverless-client/package.json\");\n    memoizedUserAgent = `${packageInfo.name}/${packageInfo.version}`;\n    return memoizedUserAgent;\n}\nexports.getUserAgent = getUserAgent; //# sourceMappingURL=runtime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHFEQUFxRCxHQUNyREEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxpQkFBaUIsR0FBRyxLQUFLO0FBQ2hELFNBQVNHO0lBQ0wsT0FBUSxNQUFrQixJQUFlLENBQTJCO0FBQ3hFO0FBQ0FILGlCQUFpQixHQUFHRztBQUNwQixJQUFJRyxvQkFBb0I7QUFDeEIsU0FBU0o7SUFDTCxJQUFJSSxzQkFBc0IsTUFBTTtRQUM1QixPQUFPQTtJQUNYO0lBQ0EsTUFBTUMsY0FBY0MsbUJBQU9BLENBQUM7SUFDNUJGLG9CQUFvQixDQUFDLEVBQUVDLFlBQVlFLElBQUksQ0FBQyxDQUFDLEVBQUVGLFlBQVlHLE9BQU8sQ0FBQyxDQUFDO0lBQ2hFLE9BQU9KO0FBQ1g7QUFDQU4sb0JBQW9CLEdBQUdFLGNBQ3ZCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BmYWwtYWkvc2R4bC1saWdodG5pbmcvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvcnVudGltZS5qcz84NmE2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcyAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRVc2VyQWdlbnQgPSBleHBvcnRzLmlzQnJvd3NlciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKTtcbn1cbmV4cG9ydHMuaXNCcm93c2VyID0gaXNCcm93c2VyO1xubGV0IG1lbW9pemVkVXNlckFnZW50ID0gbnVsbDtcbmZ1bmN0aW9uIGdldFVzZXJBZ2VudCgpIHtcbiAgICBpZiAobWVtb2l6ZWRVc2VyQWdlbnQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG1lbW9pemVkVXNlckFnZW50O1xuICAgIH1cbiAgICBjb25zdCBwYWNrYWdlSW5mbyA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuICAgIG1lbW9pemVkVXNlckFnZW50ID0gYCR7cGFja2FnZUluZm8ubmFtZX0vJHtwYWNrYWdlSW5mby52ZXJzaW9ufWA7XG4gICAgcmV0dXJuIG1lbW9pemVkVXNlckFnZW50O1xufVxuZXhwb3J0cy5nZXRVc2VyQWdlbnQgPSBnZXRVc2VyQWdlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ydW50aW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFVzZXJBZ2VudCIsImlzQnJvd3NlciIsIndpbmRvdyIsImRvY3VtZW50IiwibWVtb2l6ZWRVc2VyQWdlbnQiLCJwYWNrYWdlSW5mbyIsInJlcXVpcmUiLCJuYW1lIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/runtime.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js":
/*!***************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/storage.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.storageImpl = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\nconst config_1 = __webpack_require__(/*! ./config */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/config.js\");\nconst request_1 = __webpack_require__(/*! ./request */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/request.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\");\nfunction isDataUri(uri) {\n    // avoid uri parsing if it doesn't start with data:\n    if (!uri.startsWith(\"data:\")) {\n        return false;\n    }\n    try {\n        const url = new URL(uri);\n        return url.protocol === \"data:\";\n    } catch (_) {\n        return false;\n    }\n}\n/**\n * Get the file extension from the content type. This is used to generate\n * a file name if the file name is not provided.\n *\n * @param contentType the content type of the file.\n * @returns the file extension or `bin` if the content type is not recognized.\n */ function getExtensionFromContentType(contentType) {\n    var _a;\n    const [_, fileType] = contentType.split(\"/\");\n    return (_a = fileType.split(/[-;]/)[0]) !== null && _a !== void 0 ? _a : \"bin\";\n}\n/**\n * Initiate the upload of a file to the server. This returns the URL to upload\n * the file to and the URL of the file once it is uploaded.\n *\n * @param file the file to upload\n * @returns the URL to upload the file to and the URL of the file once it is uploaded.\n */ function initiateUpload(file) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const contentType = file.type || \"application/octet-stream\";\n        const filename = file.name || `${Date.now()}.${getExtensionFromContentType(contentType)}`;\n        return yield (0, request_1.dispatchRequest)(\"POST\", `${(0, config_1.getRestApiUrl)()}/storage/upload/initiate`, {\n            content_type: contentType,\n            file_name: filename\n        });\n    });\n}\nexports.storageImpl = {\n    upload: (file)=>tslib_1.__awaiter(void 0, void 0, void 0, function*() {\n            const { upload_url: uploadUrl, file_url: url } = yield initiateUpload(file);\n            const response = yield fetch(uploadUrl, {\n                method: \"PUT\",\n                body: file,\n                headers: {\n                    \"Content-Type\": file.type || \"application/octet-stream\"\n                }\n            });\n            const { responseHandler } = (0, config_1.getConfig)();\n            yield responseHandler(response);\n            return url;\n        }),\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    transformInput: (input)=>tslib_1.__awaiter(void 0, void 0, void 0, function*() {\n            const promises = Object.entries(input).map(([key, value])=>tslib_1.__awaiter(void 0, void 0, void 0, function*() {\n                    if (value instanceof Blob || typeof value === \"string\" && isDataUri(value)) {\n                        let blob = value;\n                        // if string is a data uri, convert to blob\n                        if (typeof value === \"string\" && isDataUri(value)) {\n                            const response = yield fetch(value);\n                            blob = yield response.blob();\n                        }\n                        const url = yield exports.storageImpl.upload(blob);\n                        return [\n                            key,\n                            url\n                        ];\n                    }\n                    if ((0, utils_1.isPlainObject)(value)) {\n                        return [\n                            key,\n                            (yield exports.storageImpl.transformInput(value))\n                        ];\n                    }\n                    return [\n                        key,\n                        value\n                    ];\n                }));\n            const results = yield Promise.all(promises);\n            return Object.fromEntries(results);\n        })\n}; //# sourceMappingURL=storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/storage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/src/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isPlainObject = exports.isReact = exports.throttle = exports.isValidUrl = exports.ensureAppIdFormat = exports.isUUIDv4 = void 0;\nfunction isUUIDv4(id) {\n    return typeof id === \"string\" && id.length === 36 && id[14] === \"4\" && [\n        \"8\",\n        \"9\",\n        \"a\",\n        \"b\"\n    ].includes(id[19]);\n}\nexports.isUUIDv4 = isUUIDv4;\nfunction ensureAppIdFormat(id) {\n    const parts = id.split(\"/\");\n    if (parts.length > 1) {\n        return id;\n    }\n    const [, appOwner, appId] = /^([0-9]+)-([a-zA-Z0-9-]+)$/.exec(id) || [];\n    if (appOwner && appId) {\n        return `${appOwner}/${appId}`;\n    }\n    throw new Error(`Invalid app id: ${id}. Must be in the format <appOwner>/<appId>`);\n}\nexports.ensureAppIdFormat = ensureAppIdFormat;\nfunction isValidUrl(url) {\n    try {\n        const { host } = new URL(url);\n        return /(fal\\.(ai|run))$/.test(host);\n    } catch (_) {\n        return false;\n    }\n}\nexports.isValidUrl = isValidUrl;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(func, limit, leading = false) {\n    let lastFunc;\n    let lastRan;\n    return (...args)=>{\n        if (!lastRan && leading) {\n            func(...args);\n            lastRan = Date.now();\n        } else {\n            if (lastFunc) {\n                clearTimeout(lastFunc);\n            }\n            lastFunc = setTimeout(()=>{\n                if (Date.now() - lastRan >= limit) {\n                    func(...args);\n                    lastRan = Date.now();\n                }\n            }, limit - (Date.now() - lastRan));\n        }\n    };\n}\nexports.throttle = throttle;\nlet isRunningInReact;\n/**\n * Not really the most optimal way to detect if we're running in React,\n * but the idea here is that we can support multiple rendering engines\n * (starting with React), with all their peculiarities, without having\n * to add a dependency or creating custom integrations (e.g. custom hooks).\n *\n * Yes, a bit of magic to make things works out-of-the-box.\n * @returns `true` if running in React, `false` otherwise.\n */ function isReact() {\n    if (isRunningInReact === undefined) {\n        const stack = new Error().stack;\n        isRunningInReact = !!stack && (stack.includes(\"node_modules/react-dom/\") || stack.includes(\"node_modules/next/\"));\n    }\n    return isRunningInReact;\n}\nexports.isReact = isReact;\n/**\n * Check if a value is a plain object.\n * @param value - The value to check.\n * @returns `true` if the value is a plain object, `false` otherwise.\n */ function isPlainObject(value) {\n    return !!value && Object.getPrototypeOf(value) === Object.prototype;\n}\nexports.isPlainObject = isPlainObject; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSxlQUFlLEdBQUdBLGdCQUFnQixHQUFHQSxrQkFBa0IsR0FBR0EseUJBQXlCLEdBQUdBLGdCQUFnQixHQUFHLEtBQUs7QUFDdEksU0FBU08sU0FBU0MsRUFBRTtJQUNoQixPQUFRLE9BQU9BLE9BQU8sWUFDbEJBLEdBQUdDLE1BQU0sS0FBSyxNQUNkRCxFQUFFLENBQUMsR0FBRyxLQUFLLE9BQ1g7UUFBQztRQUFLO1FBQUs7UUFBSztLQUFJLENBQUNFLFFBQVEsQ0FBQ0YsRUFBRSxDQUFDLEdBQUc7QUFDNUM7QUFDQVIsZ0JBQWdCLEdBQUdPO0FBQ25CLFNBQVNELGtCQUFrQkUsRUFBRTtJQUN6QixNQUFNRyxRQUFRSCxHQUFHSSxLQUFLLENBQUM7SUFDdkIsSUFBSUQsTUFBTUYsTUFBTSxHQUFHLEdBQUc7UUFDbEIsT0FBT0Q7SUFDWDtJQUNBLE1BQU0sR0FBR0ssVUFBVUMsTUFBTSxHQUFHLDZCQUE2QkMsSUFBSSxDQUFDUCxPQUFPLEVBQUU7SUFDdkUsSUFBSUssWUFBWUMsT0FBTztRQUNuQixPQUFPLENBQUMsRUFBRUQsU0FBUyxDQUFDLEVBQUVDLE1BQU0sQ0FBQztJQUNqQztJQUNBLE1BQU0sSUFBSUUsTUFBTSxDQUFDLGdCQUFnQixFQUFFUixHQUFHLDBDQUEwQyxDQUFDO0FBQ3JGO0FBQ0FSLHlCQUF5QixHQUFHTTtBQUM1QixTQUFTRCxXQUFXWSxHQUFHO0lBQ25CLElBQUk7UUFDQSxNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHLElBQUlDLElBQUlGO1FBQ3pCLE9BQU8sbUJBQW1CRyxJQUFJLENBQUNGO0lBQ25DLEVBQ0EsT0FBT0csR0FBRztRQUNOLE9BQU87SUFDWDtBQUNKO0FBQ0FyQixrQkFBa0IsR0FBR0s7QUFDckIsOERBQThEO0FBQzlELFNBQVNELFNBQVNrQixJQUFJLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxLQUFLO0lBQzFDLElBQUlDO0lBQ0osSUFBSUM7SUFDSixPQUFPLENBQUMsR0FBR0M7UUFDUCxJQUFJLENBQUNELFdBQVdGLFNBQVM7WUFDckJGLFFBQVFLO1lBQ1JELFVBQVVFLEtBQUtDLEdBQUc7UUFDdEIsT0FDSztZQUNELElBQUlKLFVBQVU7Z0JBQ1ZLLGFBQWFMO1lBQ2pCO1lBQ0FBLFdBQVdNLFdBQVc7Z0JBQ2xCLElBQUlILEtBQUtDLEdBQUcsS0FBS0gsV0FBV0gsT0FBTztvQkFDL0JELFFBQVFLO29CQUNSRCxVQUFVRSxLQUFLQyxHQUFHO2dCQUN0QjtZQUNKLEdBQUdOLFFBQVNLLENBQUFBLEtBQUtDLEdBQUcsS0FBS0gsT0FBTTtRQUNuQztJQUNKO0FBQ0o7QUFDQTFCLGdCQUFnQixHQUFHSTtBQUNuQixJQUFJNEI7QUFDSjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVM3QjtJQUNMLElBQUk2QixxQkFBcUJDLFdBQVc7UUFDaEMsTUFBTUMsUUFBUSxJQUFJbEIsUUFBUWtCLEtBQUs7UUFDL0JGLG1CQUNJLENBQUMsQ0FBQ0UsU0FDR0EsQ0FBQUEsTUFBTXhCLFFBQVEsQ0FBQyw4QkFDWndCLE1BQU14QixRQUFRLENBQUMscUJBQW9CO0lBQ25EO0lBQ0EsT0FBT3NCO0FBQ1g7QUFDQWhDLGVBQWUsR0FBR0c7QUFDbEI7Ozs7Q0FJQyxHQUNELFNBQVNELGNBQWNELEtBQUs7SUFDeEIsT0FBTyxDQUFDLENBQUNBLFNBQVNILE9BQU9xQyxjQUFjLENBQUNsQyxXQUFXSCxPQUFPc0MsU0FBUztBQUN2RTtBQUNBcEMscUJBQXFCLEdBQUdFLGVBQ3hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BmYWwtYWkvc2R4bC1saWdodG5pbmcvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLWNsaWVudC9zcmMvdXRpbHMuanM/OWFkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNQbGFpbk9iamVjdCA9IGV4cG9ydHMuaXNSZWFjdCA9IGV4cG9ydHMudGhyb3R0bGUgPSBleHBvcnRzLmlzVmFsaWRVcmwgPSBleHBvcnRzLmVuc3VyZUFwcElkRm9ybWF0ID0gZXhwb3J0cy5pc1VVSUR2NCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzVVVJRHY0KGlkKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnICYmXG4gICAgICAgIGlkLmxlbmd0aCA9PT0gMzYgJiZcbiAgICAgICAgaWRbMTRdID09PSAnNCcgJiZcbiAgICAgICAgWyc4JywgJzknLCAnYScsICdiJ10uaW5jbHVkZXMoaWRbMTldKSk7XG59XG5leHBvcnRzLmlzVVVJRHY0ID0gaXNVVUlEdjQ7XG5mdW5jdGlvbiBlbnN1cmVBcHBJZEZvcm1hdChpZCkge1xuICAgIGNvbnN0IHBhcnRzID0gaWQuc3BsaXQoJy8nKTtcbiAgICBpZiAocGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICAgIGNvbnN0IFssIGFwcE93bmVyLCBhcHBJZF0gPSAvXihbMC05XSspLShbYS16QS1aMC05LV0rKSQvLmV4ZWMoaWQpIHx8IFtdO1xuICAgIGlmIChhcHBPd25lciAmJiBhcHBJZCkge1xuICAgICAgICByZXR1cm4gYCR7YXBwT3duZXJ9LyR7YXBwSWR9YDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFwcCBpZDogJHtpZH0uIE11c3QgYmUgaW4gdGhlIGZvcm1hdCA8YXBwT3duZXI+LzxhcHBJZD5gKTtcbn1cbmV4cG9ydHMuZW5zdXJlQXBwSWRGb3JtYXQgPSBlbnN1cmVBcHBJZEZvcm1hdDtcbmZ1bmN0aW9uIGlzVmFsaWRVcmwodXJsKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBob3N0IH0gPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIHJldHVybiAvKGZhbFxcLihhaXxydW4pKSQvLnRlc3QoaG9zdCk7XG4gICAgfVxuICAgIGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLmlzVmFsaWRVcmwgPSBpc1ZhbGlkVXJsO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIGxpbWl0LCBsZWFkaW5nID0gZmFsc2UpIHtcbiAgICBsZXQgbGFzdEZ1bmM7XG4gICAgbGV0IGxhc3RSYW47XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmICghbGFzdFJhbiAmJiBsZWFkaW5nKSB7XG4gICAgICAgICAgICBmdW5jKC4uLmFyZ3MpO1xuICAgICAgICAgICAgbGFzdFJhbiA9IERhdGUubm93KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobGFzdEZ1bmMpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobGFzdEZ1bmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEZ1bmMgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIGxhc3RSYW4gPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYyguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJhbiA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbGltaXQgLSAoRGF0ZS5ub3coKSAtIGxhc3RSYW4pKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLnRocm90dGxlID0gdGhyb3R0bGU7XG5sZXQgaXNSdW5uaW5nSW5SZWFjdDtcbi8qKlxuICogTm90IHJlYWxseSB0aGUgbW9zdCBvcHRpbWFsIHdheSB0byBkZXRlY3QgaWYgd2UncmUgcnVubmluZyBpbiBSZWFjdCxcbiAqIGJ1dCB0aGUgaWRlYSBoZXJlIGlzIHRoYXQgd2UgY2FuIHN1cHBvcnQgbXVsdGlwbGUgcmVuZGVyaW5nIGVuZ2luZXNcbiAqIChzdGFydGluZyB3aXRoIFJlYWN0KSwgd2l0aCBhbGwgdGhlaXIgcGVjdWxpYXJpdGllcywgd2l0aG91dCBoYXZpbmdcbiAqIHRvIGFkZCBhIGRlcGVuZGVuY3kgb3IgY3JlYXRpbmcgY3VzdG9tIGludGVncmF0aW9ucyAoZS5nLiBjdXN0b20gaG9va3MpLlxuICpcbiAqIFllcywgYSBiaXQgb2YgbWFnaWMgdG8gbWFrZSB0aGluZ3Mgd29ya3Mgb3V0LW9mLXRoZS1ib3guXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgcnVubmluZyBpbiBSZWFjdCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUmVhY3QoKSB7XG4gICAgaWYgKGlzUnVubmluZ0luUmVhY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgICAgICBpc1J1bm5pbmdJblJlYWN0ID1cbiAgICAgICAgICAgICEhc3RhY2sgJiZcbiAgICAgICAgICAgICAgICAoc3RhY2suaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy9yZWFjdC1kb20vJykgfHxcbiAgICAgICAgICAgICAgICAgICAgc3RhY2suaW5jbHVkZXMoJ25vZGVfbW9kdWxlcy9uZXh0LycpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzUnVubmluZ0luUmVhY3Q7XG59XG5leHBvcnRzLmlzUmVhY3QgPSBpc1JlYWN0O1xuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBpcyBhIHBsYWluIG9iamVjdCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuZXhwb3J0cy5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzUGxhaW5PYmplY3QiLCJpc1JlYWN0IiwidGhyb3R0bGUiLCJpc1ZhbGlkVXJsIiwiZW5zdXJlQXBwSWRGb3JtYXQiLCJpc1VVSUR2NCIsImlkIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJwYXJ0cyIsInNwbGl0IiwiYXBwT3duZXIiLCJhcHBJZCIsImV4ZWMiLCJFcnJvciIsInVybCIsImhvc3QiLCJVUkwiLCJ0ZXN0IiwiXyIsImZ1bmMiLCJsaW1pdCIsImxlYWRpbmciLCJsYXN0RnVuYyIsImxhc3RSYW4iLCJhcmdzIiwiRGF0ZSIsIm5vdyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJpc1J1bm5pbmdJblJlYWN0IiwidW5kZWZpbmVkIiwic3RhY2siLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@fal-ai/serverless-client/src/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/serverless-proxy/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-proxy/src/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromHeaders = exports.handleRequest = exports.DEFAULT_PROXY_ROUTE = exports.TARGET_URL_HEADER = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nexports.TARGET_URL_HEADER = \"x-fal-target-url\";\nexports.DEFAULT_PROXY_ROUTE = \"/api/fal/proxy\";\nconst FAL_KEY = process.env.FAL_KEY;\nconst FAL_KEY_ID = process.env.FAL_KEY_ID;\nconst FAL_KEY_SECRET = process.env.FAL_KEY_SECRET;\nconst FAL_URL_REG_EXP = /(\\.|^)fal\\.(run|ai)$/;\n/**\n * Utility to get a header value as `string` from a Headers object.\n *\n * @private\n * @param request the header value.\n * @returns the header value as `string` or `undefined` if the header is not set.\n */ function singleHeaderValue(value) {\n    if (!value) {\n        return undefined;\n    }\n    if (Array.isArray(value)) {\n        return value[0];\n    }\n    return value;\n}\nfunction getFalKey() {\n    if (FAL_KEY) {\n        return FAL_KEY;\n    }\n    if (FAL_KEY_ID && FAL_KEY_SECRET) {\n        return `${FAL_KEY_ID}:${FAL_KEY_SECRET}`;\n    }\n    return undefined;\n}\nconst EXCLUDED_HEADERS = [\n    \"content-length\",\n    \"content-encoding\"\n];\n/**\n * A request handler that proxies the request to the fal-serverless\n * endpoint. This is useful so client-side calls to the fal-serverless endpoint\n * can be made without CORS issues and the correct credentials can be added\n * effortlessly.\n *\n * @param behavior the request proxy behavior.\n * @returns Promise<any> the promise that will be resolved once the request is done.\n */ function handleRequest(behavior) {\n    var _a, _b, _c;\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        const targetUrl = singleHeaderValue(behavior.getHeader(exports.TARGET_URL_HEADER));\n        if (!targetUrl) {\n            return behavior.respondWith(400, `Missing the ${exports.TARGET_URL_HEADER} header`);\n        }\n        const urlHost = new URL(targetUrl).host;\n        if (!FAL_URL_REG_EXP.test(urlHost)) {\n            return behavior.respondWith(412, `Invalid ${exports.TARGET_URL_HEADER} header`);\n        }\n        const falKey = behavior.resolveApiKey ? yield behavior.resolveApiKey() : getFalKey();\n        if (!falKey) {\n            return behavior.respondWith(401, \"Missing fal.ai credentials\");\n        }\n        // pass over headers prefixed with x-fal-*\n        const headers = {};\n        Object.keys(behavior.getHeaders()).forEach((key)=>{\n            if (key.toLowerCase().startsWith(\"x-fal-\")) {\n                headers[key.toLowerCase()] = behavior.getHeader(key);\n            }\n        });\n        const proxyUserAgent = `@fal-ai/serverless-proxy/${behavior.id}`;\n        const userAgent = singleHeaderValue(behavior.getHeader(\"user-agent\"));\n        const res = yield fetch(targetUrl, {\n            method: behavior.method,\n            headers: Object.assign(Object.assign({}, headers), {\n                authorization: (_a = singleHeaderValue(behavior.getHeader(\"authorization\"))) !== null && _a !== void 0 ? _a : `Key ${falKey}`,\n                accept: \"application/json\",\n                \"content-type\": \"application/json\",\n                \"user-agent\": userAgent,\n                \"x-fal-client-proxy\": proxyUserAgent\n            }),\n            body: ((_b = behavior.method) === null || _b === void 0 ? void 0 : _b.toUpperCase()) === \"GET\" ? undefined : yield behavior.getBody()\n        });\n        // copy headers from fal to the proxied response\n        res.headers.forEach((value, key)=>{\n            if (!EXCLUDED_HEADERS.includes(key.toLowerCase())) {\n                behavior.sendHeader(key, value);\n            }\n        });\n        if ((_c = res.headers.get(\"content-type\")) === null || _c === void 0 ? void 0 : _c.includes(\"application/json\")) {\n            const data = yield res.json();\n            return behavior.respondWith(res.status, data);\n        }\n        const data = yield res.text();\n        return behavior.respondWith(res.status, data);\n    });\n}\nexports.handleRequest = handleRequest;\nfunction fromHeaders(headers) {\n    // TODO once Header.entries() is available, use that instead\n    // Object.fromEntries(headers.entries());\n    const result = {};\n    headers.forEach((value, key)=>{\n        result[key] = value;\n    });\n    return result;\n}\nexports.fromHeaders = fromHeaders; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/serverless-proxy/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@fal-ai/serverless-proxy/src/nextjs.js":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-proxy/src/nextjs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst NextResponse = (__webpack_require__(/*! next/dist/server/web/spec-extension/response */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/response.js\").NextResponse);\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.route = exports.handler = exports.PROXY_ROUTE = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\n;\nconst index_1 = __webpack_require__(/*! ./index */ \"(rsc)/./node_modules/@fal-ai/serverless-proxy/src/index.js\");\n/**\n * The default Next API route for the fal.ai client proxy.\n */ exports.PROXY_ROUTE = index_1.DEFAULT_PROXY_ROUTE;\n/**\n * The Next API route handler for the fal.ai client proxy.\n * Use it with the /pages router in Next.js.\n *\n * @param request the Next API request object.\n * @param response the Next API response object.\n * @returns a promise that resolves when the request is handled.\n */ const handler = (request, response)=>tslib_1.__awaiter(void 0, void 0, void 0, function*() {\n        return (0, index_1.handleRequest)({\n            id: \"nextjs-page-router\",\n            method: request.method || \"POST\",\n            respondWith: (status, data)=>response.status(status).json(data),\n            getHeaders: ()=>request.headers,\n            getHeader: (name)=>request.headers[name],\n            sendHeader: (name, value)=>response.setHeader(name, value),\n            getBody: ()=>tslib_1.__awaiter(void 0, void 0, void 0, function*() {\n                    return JSON.stringify(request.body);\n                })\n        });\n    });\nexports.handler = handler;\n/**\n * The Next API route handler for the fal.ai client proxy on App Router apps.\n *\n * @param request the Next API request object.\n * @returns a promise that resolves when the request is handled.\n */ function routeHandler(request) {\n    return tslib_1.__awaiter(this, void 0, void 0, function*() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const responseHeaders = {};\n        return yield (0, index_1.handleRequest)({\n            id: \"nextjs-app-router\",\n            method: request.method,\n            respondWith: (status, data)=>NextResponse.json(data, {\n                    status,\n                    headers: responseHeaders\n                }),\n            getHeaders: ()=>(0, index_1.fromHeaders)(request.headers),\n            getHeader: (name)=>request.headers.get(name),\n            sendHeader: (name, value)=>responseHeaders[name] = value,\n            getBody: ()=>tslib_1.__awaiter(this, void 0, void 0, function*() {\n                    return request.text();\n                })\n        });\n    });\n}\nexports.route = {\n    handler: routeHandler,\n    GET: routeHandler,\n    POST: routeHandler\n}; //# sourceMappingURL=nextjs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGZhbC1haS9zZXJ2ZXJsZXNzLXByb3h5L3NyYy9uZXh0anMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUdBLGVBQWUsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUM3RCxNQUFNSyxVQUFVQyxtQkFBT0EsQ0FBQyx1REFBTzs7QUFFL0IsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsMkVBQVM7QUFDakM7O0NBRUMsR0FDRE4sbUJBQW1CLEdBQUdPLFFBQVFDLG1CQUFtQjtBQUNqRDs7Ozs7OztDQU9DLEdBQ0QsTUFBTUwsVUFBVSxDQUFDTSxTQUFTQyxXQUFhTCxRQUFRTSxTQUFTLENBQUMsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUc7UUFDN0UsT0FBTyxDQUFDLEdBQUdKLFFBQVFLLGFBQWEsRUFBRTtZQUM5QkMsSUFBSTtZQUNKQyxRQUFRTCxRQUFRSyxNQUFNLElBQUk7WUFDMUJDLGFBQWEsQ0FBQ0MsUUFBUUMsT0FBU1AsU0FBU00sTUFBTSxDQUFDQSxRQUFRRSxJQUFJLENBQUNEO1lBQzVERSxZQUFZLElBQU1WLFFBQVFXLE9BQU87WUFDakNDLFdBQVcsQ0FBQ0MsT0FBU2IsUUFBUVcsT0FBTyxDQUFDRSxLQUFLO1lBQzFDQyxZQUFZLENBQUNELE1BQU1yQixRQUFVUyxTQUFTYyxTQUFTLENBQUNGLE1BQU1yQjtZQUN0RHdCLFNBQVMsSUFBTXBCLFFBQVFNLFNBQVMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRztvQkFBZSxPQUFPZSxLQUFLQyxTQUFTLENBQUNsQixRQUFRbUIsSUFBSTtnQkFBRztRQUNqSDtJQUNKO0FBQ0E1QixlQUFlLEdBQUdHO0FBQ2xCOzs7OztDQUtDLEdBQ0QsU0FBUzBCLGFBQWFwQixPQUFPO0lBQ3pCLE9BQU9KLFFBQVFNLFNBQVMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRztRQUMzQyw4REFBOEQ7UUFDOUQsTUFBTW1CLGtCQUFrQixDQUFDO1FBQ3pCLE9BQU8sTUFBTSxDQUFDLEdBQUd2QixRQUFRSyxhQUFhLEVBQUU7WUFDcENDLElBQUk7WUFDSkMsUUFBUUwsUUFBUUssTUFBTTtZQUN0QkMsYUFBYSxDQUFDQyxRQUFRQyxPQUFTYyxhQUFzQmIsSUFBSSxDQUFDRCxNQUFNO29CQUM1REQ7b0JBQ0FJLFNBQVNVO2dCQUNiO1lBQ0FYLFlBQVksSUFBTSxDQUFDLEdBQUdaLFFBQVF5QixXQUFXLEVBQUV2QixRQUFRVyxPQUFPO1lBQzFEQyxXQUFXLENBQUNDLE9BQVNiLFFBQVFXLE9BQU8sQ0FBQ2EsR0FBRyxDQUFDWDtZQUN6Q0MsWUFBWSxDQUFDRCxNQUFNckIsUUFBVzZCLGVBQWUsQ0FBQ1IsS0FBSyxHQUFHckI7WUFDdER3QixTQUFTLElBQU1wQixRQUFRTSxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUc7b0JBQWUsT0FBT0YsUUFBUXlCLElBQUk7Z0JBQUk7UUFDakc7SUFDSjtBQUNKO0FBQ0FsQyxhQUFhLEdBQUc7SUFDWkcsU0FBUzBCO0lBQ1RNLEtBQUtOO0lBQ0xPLE1BQU1QO0FBQ1YsR0FDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZmFsLWFpL3NkeGwtbGlnaHRuaW5nLy4vbm9kZV9tb2R1bGVzL0BmYWwtYWkvc2VydmVybGVzcy1wcm94eS9zcmMvbmV4dGpzLmpzPzI4NTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJvdXRlID0gZXhwb3J0cy5oYW5kbGVyID0gZXhwb3J0cy5QUk9YWV9ST1VURSA9IHZvaWQgMDtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG5jb25zdCBzZXJ2ZXJfMSA9IHJlcXVpcmUoXCJuZXh0L3NlcnZlclwiKTtcbmNvbnN0IGluZGV4XzEgPSByZXF1aXJlKFwiLi9pbmRleFwiKTtcbi8qKlxuICogVGhlIGRlZmF1bHQgTmV4dCBBUEkgcm91dGUgZm9yIHRoZSBmYWwuYWkgY2xpZW50IHByb3h5LlxuICovXG5leHBvcnRzLlBST1hZX1JPVVRFID0gaW5kZXhfMS5ERUZBVUxUX1BST1hZX1JPVVRFO1xuLyoqXG4gKiBUaGUgTmV4dCBBUEkgcm91dGUgaGFuZGxlciBmb3IgdGhlIGZhbC5haSBjbGllbnQgcHJveHkuXG4gKiBVc2UgaXQgd2l0aCB0aGUgL3BhZ2VzIHJvdXRlciBpbiBOZXh0LmpzLlxuICpcbiAqIEBwYXJhbSByZXF1ZXN0IHRoZSBOZXh0IEFQSSByZXF1ZXN0IG9iamVjdC5cbiAqIEBwYXJhbSByZXNwb25zZSB0aGUgTmV4dCBBUEkgcmVzcG9uc2Ugb2JqZWN0LlxuICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5jb25zdCBoYW5kbGVyID0gKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB0c2xpYl8xLl9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHJldHVybiAoMCwgaW5kZXhfMS5oYW5kbGVSZXF1ZXN0KSh7XG4gICAgICAgIGlkOiAnbmV4dGpzLXBhZ2Utcm91dGVyJyxcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCB8fCAnUE9TVCcsXG4gICAgICAgIHJlc3BvbmRXaXRoOiAoc3RhdHVzLCBkYXRhKSA9PiByZXNwb25zZS5zdGF0dXMoc3RhdHVzKS5qc29uKGRhdGEpLFxuICAgICAgICBnZXRIZWFkZXJzOiAoKSA9PiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICAgIGdldEhlYWRlcjogKG5hbWUpID0+IHJlcXVlc3QuaGVhZGVyc1tuYW1lXSxcbiAgICAgICAgc2VuZEhlYWRlcjogKG5hbWUsIHZhbHVlKSA9PiByZXNwb25zZS5zZXRIZWFkZXIobmFtZSwgdmFsdWUpLFxuICAgICAgICBnZXRCb2R5OiAoKSA9PiB0c2xpYl8xLl9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVxdWVzdC5ib2R5KTsgfSksXG4gICAgfSk7XG59KTtcbmV4cG9ydHMuaGFuZGxlciA9IGhhbmRsZXI7XG4vKipcbiAqIFRoZSBOZXh0IEFQSSByb3V0ZSBoYW5kbGVyIGZvciB0aGUgZmFsLmFpIGNsaWVudCBwcm94eSBvbiBBcHAgUm91dGVyIGFwcHMuXG4gKlxuICogQHBhcmFtIHJlcXVlc3QgdGhlIE5leHQgQVBJIHJlcXVlc3Qgb2JqZWN0LlxuICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcmVxdWVzdCBpcyBoYW5kbGVkLlxuICovXG5mdW5jdGlvbiByb3V0ZUhhbmRsZXIocmVxdWVzdCkge1xuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0ge307XG4gICAgICAgIHJldHVybiB5aWVsZCAoMCwgaW5kZXhfMS5oYW5kbGVSZXF1ZXN0KSh7XG4gICAgICAgICAgICBpZDogJ25leHRqcy1hcHAtcm91dGVyJyxcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICByZXNwb25kV2l0aDogKHN0YXR1cywgZGF0YSkgPT4gc2VydmVyXzEuTmV4dFJlc3BvbnNlLmpzb24oZGF0YSwge1xuICAgICAgICAgICAgICAgIHN0YXR1cyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGdldEhlYWRlcnM6ICgpID0+ICgwLCBpbmRleF8xLmZyb21IZWFkZXJzKShyZXF1ZXN0LmhlYWRlcnMpLFxuICAgICAgICAgICAgZ2V0SGVhZGVyOiAobmFtZSkgPT4gcmVxdWVzdC5oZWFkZXJzLmdldChuYW1lKSxcbiAgICAgICAgICAgIHNlbmRIZWFkZXI6IChuYW1lLCB2YWx1ZSkgPT4gKHJlc3BvbnNlSGVhZGVyc1tuYW1lXSA9IHZhbHVlKSxcbiAgICAgICAgICAgIGdldEJvZHk6ICgpID0+IHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gcmVxdWVzdC50ZXh0KCk7IH0pLFxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucm91dGUgPSB7XG4gICAgaGFuZGxlcjogcm91dGVIYW5kbGVyLFxuICAgIEdFVDogcm91dGVIYW5kbGVyLFxuICAgIFBPU1Q6IHJvdXRlSGFuZGxlcixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0anMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicm91dGUiLCJoYW5kbGVyIiwiUFJPWFlfUk9VVEUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsImluZGV4XzEiLCJERUZBVUxUX1BST1hZX1JPVVRFIiwicmVxdWVzdCIsInJlc3BvbnNlIiwiX19hd2FpdGVyIiwiaGFuZGxlUmVxdWVzdCIsImlkIiwibWV0aG9kIiwicmVzcG9uZFdpdGgiLCJzdGF0dXMiLCJkYXRhIiwianNvbiIsImdldEhlYWRlcnMiLCJoZWFkZXJzIiwiZ2V0SGVhZGVyIiwibmFtZSIsInNlbmRIZWFkZXIiLCJzZXRIZWFkZXIiLCJnZXRCb2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImJvZHkiLCJyb3V0ZUhhbmRsZXIiLCJyZXNwb25zZUhlYWRlcnMiLCJzZXJ2ZXJfMSIsImZyb21IZWFkZXJzIiwiZ2V0IiwidGV4dCIsIkdFVCIsIlBPU1QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@fal-ai/serverless-proxy/src/nextjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@fal-ai/serverless-client/package.json":
/*!*************************************************************!*\
  !*** ./node_modules/@fal-ai/serverless-client/package.json ***!
  \*************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@fal-ai/serverless-client","description":"The fal serverless JS/TS client","version":"0.8.5","license":"MIT","repository":{"type":"git","url":"https://github.com/fal-ai/fal-js.git","directory":"libs/client"},"keywords":["fal","serverless","client","ai","ml"],"dependencies":{"@msgpack/msgpack":"^3.0.0-beta2","robot3":"^0.4.1","uuid-random":"^1.3.2"},"engines":{"node":">=18.0.0"},"main":"./src/index.js","type":"commonjs"}');

/***/ })

};
;