"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/robot3";
exports.ids = ["vendor-chunks/robot3"];
exports.modules = {

/***/ "(ssr)/./node_modules/robot3/dist/machine.js":
/*!*********************************************!*\
  !*** ./node_modules/robot3/dist/machine.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction valueEnumerable(value) {\n    return {\n        enumerable: true,\n        value\n    };\n}\nfunction valueEnumerableWritable(value) {\n    return {\n        enumerable: true,\n        writable: true,\n        value\n    };\n}\nlet d = {};\nlet truthy = ()=>true;\nlet empty = ()=>({});\nlet identity = (a)=>a;\nlet callBoth = (par, fn, self, args)=>par.apply(self, args) && fn.apply(self, args);\nlet callForward = (par, fn, self, [a, b])=>fn.call(self, par.call(self, a, b), b);\nlet create = (a, b)=>Object.freeze(Object.create(a, b));\nfunction stack(fns, def, caller) {\n    return fns.reduce((par, fn)=>{\n        return function(...args) {\n            return caller(par, fn, this, args);\n        };\n    }, def);\n}\nfunction fnType(fn) {\n    return create(this, {\n        fn: valueEnumerable(fn)\n    });\n}\nlet reduceType = {};\nlet reduce = fnType.bind(reduceType);\nlet action = (fn)=>reduce((ctx, ev)=>!!~fn(ctx, ev) && ctx);\nlet guardType = {};\nlet guard = fnType.bind(guardType);\nfunction filter(Type, arr) {\n    return arr.filter((value)=>Type.isPrototypeOf(value));\n}\nfunction makeTransition(from, to, ...args) {\n    let guards = stack(filter(guardType, args).map((t)=>t.fn), truthy, callBoth);\n    let reducers = stack(filter(reduceType, args).map((t)=>t.fn), identity, callForward);\n    return create(this, {\n        from: valueEnumerable(from),\n        to: valueEnumerable(to),\n        guards: valueEnumerable(guards),\n        reducers: valueEnumerable(reducers)\n    });\n}\nlet transitionType = {};\nlet immediateType = {};\nlet transition = makeTransition.bind(transitionType);\nlet immediate = makeTransition.bind(immediateType, null);\nfunction enterImmediate(machine, service, event) {\n    return transitionTo(service, machine, event, this.immediates) || machine;\n}\nfunction transitionsToMap(transitions) {\n    let m = new Map();\n    for (let t of transitions){\n        if (!m.has(t.from)) m.set(t.from, []);\n        m.get(t.from).push(t);\n    }\n    return m;\n}\nlet stateType = {\n    enter: identity\n};\nfunction state(...args) {\n    let transitions = filter(transitionType, args);\n    let immediates = filter(immediateType, args);\n    let desc = {\n        final: valueEnumerable(args.length === 0),\n        transitions: valueEnumerable(transitionsToMap(transitions))\n    };\n    if (immediates.length) {\n        desc.immediates = valueEnumerable(immediates);\n        desc.enter = valueEnumerable(enterImmediate);\n    }\n    return create(stateType, desc);\n}\nlet invokeFnType = {\n    enter (machine2, service, event) {\n        let rn = this.fn.call(service, service.context, event);\n        if (machine.isPrototypeOf(rn)) return create(invokeMachineType, {\n            machine: valueEnumerable(rn),\n            transitions: valueEnumerable(this.transitions)\n        }).enter(machine2, service, event);\n        rn.then((data)=>service.send({\n                type: \"done\",\n                data\n            })).catch((error)=>service.send({\n                type: \"error\",\n                error\n            }));\n        return machine2;\n    }\n};\nlet invokeMachineType = {\n    enter (machine, service, event) {\n        service.child = interpret(this.machine, (s)=>{\n            service.onChange(s);\n            if (service.child == s && s.machine.state.value.final) {\n                delete service.child;\n                service.send({\n                    type: \"done\",\n                    data: s.context\n                });\n            }\n        }, service.context, event);\n        if (service.child.machine.state.value.final) {\n            let data = service.child.context;\n            delete service.child;\n            return transitionTo(service, machine, {\n                type: \"done\",\n                data\n            }, this.transitions.get(\"done\"));\n        }\n        return machine;\n    }\n};\nfunction invoke(fn, ...transitions) {\n    let t = valueEnumerable(transitionsToMap(transitions));\n    return machine.isPrototypeOf(fn) ? create(invokeMachineType, {\n        machine: valueEnumerable(fn),\n        transitions: t\n    }) : create(invokeFnType, {\n        fn: valueEnumerable(fn),\n        transitions: t\n    });\n}\nlet machine = {\n    get state () {\n        return {\n            name: this.current,\n            value: this.states[this.current]\n        };\n    }\n};\nfunction createMachine(current, states, contextFn = empty) {\n    if (typeof current !== \"string\") {\n        contextFn = states || empty;\n        states = current;\n        current = Object.keys(states)[0];\n    }\n    if (d._create) d._create(current, states);\n    return create(machine, {\n        context: valueEnumerable(contextFn),\n        current: valueEnumerable(current),\n        states: valueEnumerable(states)\n    });\n}\nfunction transitionTo(service, machine, fromEvent, candidates) {\n    let { context } = service;\n    for (let { to, guards, reducers } of candidates){\n        if (guards(context, fromEvent)) {\n            service.context = reducers.call(service, context, fromEvent);\n            let original = machine.original || machine;\n            let newMachine = create(original, {\n                current: valueEnumerable(to),\n                original: {\n                    value: original\n                }\n            });\n            if (d._onEnter) d._onEnter(machine, to, service.context, context, fromEvent);\n            let state = newMachine.state.value;\n            return state.enter(newMachine, service, fromEvent);\n        }\n    }\n}\nfunction send(service, event) {\n    let eventName = event.type || event;\n    let { machine } = service;\n    let { value: state, name: currentStateName } = machine.state;\n    if (state.transitions.has(eventName)) {\n        return transitionTo(service, machine, event, state.transitions.get(eventName)) || machine;\n    } else {\n        if (d._send) d._send(eventName, currentStateName);\n    }\n    return machine;\n}\nlet service = {\n    send (event) {\n        this.machine = send(this, event);\n        // TODO detect change\n        this.onChange(this);\n    }\n};\nfunction interpret(machine, onChange, initialContext, event) {\n    let s = Object.create(service, {\n        machine: valueEnumerableWritable(machine),\n        context: valueEnumerableWritable(machine.context(initialContext, event)),\n        onChange: valueEnumerable(onChange)\n    });\n    s.send = s.send.bind(s);\n    s.machine = s.machine.state.value.enter(s.machine, s, event);\n    return s;\n}\nexports.action = action;\nexports.createMachine = createMachine;\nexports.d = d;\nexports.guard = guard;\nexports.immediate = immediate;\nexports.interpret = interpret;\nexports.invoke = invoke;\nexports.reduce = reduce;\nexports.state = state;\nexports.transition = transition;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/robot3/dist/machine.js\n");

/***/ })

};
;